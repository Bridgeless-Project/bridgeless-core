// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bridge/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryTransactionByIdRequest is request type for the Query/TransactionById RPC method.
type QueryTransactionByIdRequest struct {
	// id defines the unique transaction identifier.
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TxHash  string `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	TxNonce uint64 `protobuf:"varint,3,opt,name=tx_nonce,json=txNonce,proto3" json:"tx_nonce,omitempty"`
}

func (m *QueryTransactionByIdRequest) Reset()         { *m = QueryTransactionByIdRequest{} }
func (m *QueryTransactionByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTransactionByIdRequest) ProtoMessage()    {}
func (*QueryTransactionByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{1}
}
func (m *QueryTransactionByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTransactionByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTransactionByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTransactionByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTransactionByIdRequest.Merge(m, src)
}
func (m *QueryTransactionByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTransactionByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTransactionByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTransactionByIdRequest proto.InternalMessageInfo

func (m *QueryTransactionByIdRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *QueryTransactionByIdRequest) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *QueryTransactionByIdRequest) GetTxNonce() uint64 {
	if m != nil {
		return m.TxNonce
	}
	return 0
}

// QueryTransactionByIdResponse is response type for the Query/TransactionById RPC method.
type QueryTransactionByIdResponse struct {
	Transaction Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction"`
}

func (m *QueryTransactionByIdResponse) Reset()         { *m = QueryTransactionByIdResponse{} }
func (m *QueryTransactionByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTransactionByIdResponse) ProtoMessage()    {}
func (*QueryTransactionByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{2}
}
func (m *QueryTransactionByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTransactionByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTransactionByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTransactionByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTransactionByIdResponse.Merge(m, src)
}
func (m *QueryTransactionByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTransactionByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTransactionByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTransactionByIdResponse proto.InternalMessageInfo

func (m *QueryTransactionByIdResponse) GetTransaction() Transaction {
	if m != nil {
		return m.Transaction
	}
	return Transaction{}
}

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{3}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryTransactionsRequest is request type for the Query/Transactions RPC method.
type QueryTransactionsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTransactionsRequest) Reset()         { *m = QueryTransactionsRequest{} }
func (m *QueryTransactionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTransactionsRequest) ProtoMessage()    {}
func (*QueryTransactionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{4}
}
func (m *QueryTransactionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTransactionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTransactionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTransactionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTransactionsRequest.Merge(m, src)
}
func (m *QueryTransactionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTransactionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTransactionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTransactionsRequest proto.InternalMessageInfo

func (m *QueryTransactionsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTransactionsResponse is response type for the Query/Transactions RPC method.
type QueryTransactionsResponse struct {
	// Transactions is a list of transactions.
	Transactions []Transaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTransactionsResponse) Reset()         { *m = QueryTransactionsResponse{} }
func (m *QueryTransactionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTransactionsResponse) ProtoMessage()    {}
func (*QueryTransactionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{5}
}
func (m *QueryTransactionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTransactionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTransactionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTransactionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTransactionsResponse.Merge(m, src)
}
func (m *QueryTransactionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTransactionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTransactionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTransactionsResponse proto.InternalMessageInfo

func (m *QueryTransactionsResponse) GetTransactions() []Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *QueryTransactionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTokenById struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetTokenById) Reset()         { *m = QueryGetTokenById{} }
func (m *QueryGetTokenById) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokenById) ProtoMessage()    {}
func (*QueryGetTokenById) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{6}
}
func (m *QueryGetTokenById) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokenById) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokenById.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokenById) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokenById.Merge(m, src)
}
func (m *QueryGetTokenById) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokenById) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokenById.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokenById proto.InternalMessageInfo

func (m *QueryGetTokenById) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetTokenByIdResponse struct {
	Token Token `protobuf:"bytes,1,opt,name=token,proto3" json:"token"`
}

func (m *QueryGetTokenByIdResponse) Reset()         { *m = QueryGetTokenByIdResponse{} }
func (m *QueryGetTokenByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokenByIdResponse) ProtoMessage()    {}
func (*QueryGetTokenByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{7}
}
func (m *QueryGetTokenByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokenByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokenByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokenByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokenByIdResponse.Merge(m, src)
}
func (m *QueryGetTokenByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokenByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokenByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokenByIdResponse proto.InternalMessageInfo

func (m *QueryGetTokenByIdResponse) GetToken() Token {
	if m != nil {
		return m.Token
	}
	return Token{}
}

type QueryGetTokens struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetTokens) Reset()         { *m = QueryGetTokens{} }
func (m *QueryGetTokens) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokens) ProtoMessage()    {}
func (*QueryGetTokens) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{8}
}
func (m *QueryGetTokens) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokens) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokens.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokens) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokens.Merge(m, src)
}
func (m *QueryGetTokens) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokens) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokens.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokens proto.InternalMessageInfo

func (m *QueryGetTokens) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTokensResponse struct {
	Tokens     []Token             `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetTokensResponse) Reset()         { *m = QueryGetTokensResponse{} }
func (m *QueryGetTokensResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokensResponse) ProtoMessage()    {}
func (*QueryGetTokensResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{9}
}
func (m *QueryGetTokensResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokensResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokensResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokensResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokensResponse.Merge(m, src)
}
func (m *QueryGetTokensResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokensResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokensResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokensResponse proto.InternalMessageInfo

func (m *QueryGetTokensResponse) GetTokens() []Token {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *QueryGetTokensResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetChains struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetChains) Reset()         { *m = QueryGetChains{} }
func (m *QueryGetChains) String() string { return proto.CompactTextString(m) }
func (*QueryGetChains) ProtoMessage()    {}
func (*QueryGetChains) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{10}
}
func (m *QueryGetChains) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChains) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChains.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChains) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChains.Merge(m, src)
}
func (m *QueryGetChains) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChains) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChains.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChains proto.InternalMessageInfo

func (m *QueryGetChains) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetChainsResponse struct {
	Chains     []Chain             `protobuf:"bytes,1,rep,name=chains,proto3" json:"chains"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetChainsResponse) Reset()         { *m = QueryGetChainsResponse{} }
func (m *QueryGetChainsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainsResponse) ProtoMessage()    {}
func (*QueryGetChainsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{11}
}
func (m *QueryGetChainsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainsResponse.Merge(m, src)
}
func (m *QueryGetChainsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainsResponse proto.InternalMessageInfo

func (m *QueryGetChainsResponse) GetChains() []Chain {
	if m != nil {
		return m.Chains
	}
	return nil
}

func (m *QueryGetChainsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTokenPair struct {
	SrcChain   string `protobuf:"bytes,1,opt,name=src_chain,json=srcChain,proto3" json:"src_chain,omitempty"`
	SrcAddress string `protobuf:"bytes,2,opt,name=src_address,json=srcAddress,proto3" json:"src_address,omitempty"`
	DstChain   string `protobuf:"bytes,3,opt,name=dst_chain,json=dstChain,proto3" json:"dst_chain,omitempty"`
}

func (m *QueryGetTokenPair) Reset()         { *m = QueryGetTokenPair{} }
func (m *QueryGetTokenPair) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokenPair) ProtoMessage()    {}
func (*QueryGetTokenPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{12}
}
func (m *QueryGetTokenPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokenPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokenPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokenPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokenPair.Merge(m, src)
}
func (m *QueryGetTokenPair) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokenPair) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokenPair.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokenPair proto.InternalMessageInfo

func (m *QueryGetTokenPair) GetSrcChain() string {
	if m != nil {
		return m.SrcChain
	}
	return ""
}

func (m *QueryGetTokenPair) GetSrcAddress() string {
	if m != nil {
		return m.SrcAddress
	}
	return ""
}

func (m *QueryGetTokenPair) GetDstChain() string {
	if m != nil {
		return m.DstChain
	}
	return ""
}

type QueryGetTokenInfo struct {
	Chain   string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetTokenInfo) Reset()         { *m = QueryGetTokenInfo{} }
func (m *QueryGetTokenInfo) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokenInfo) ProtoMessage()    {}
func (*QueryGetTokenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{13}
}
func (m *QueryGetTokenInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokenInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokenInfo.Merge(m, src)
}
func (m *QueryGetTokenInfo) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokenInfo proto.InternalMessageInfo

func (m *QueryGetTokenInfo) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *QueryGetTokenInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetTokenInfoResponse struct {
	Info TokenInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info"`
}

func (m *QueryGetTokenInfoResponse) Reset()         { *m = QueryGetTokenInfoResponse{} }
func (m *QueryGetTokenInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokenInfoResponse) ProtoMessage()    {}
func (*QueryGetTokenInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{14}
}
func (m *QueryGetTokenInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokenInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokenInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokenInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokenInfoResponse.Merge(m, src)
}
func (m *QueryGetTokenInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokenInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokenInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokenInfoResponse proto.InternalMessageInfo

func (m *QueryGetTokenInfoResponse) GetInfo() TokenInfo {
	if m != nil {
		return m.Info
	}
	return TokenInfo{}
}

type QueryGetTokenPairResponse struct {
	Info TokenInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info"`
}

func (m *QueryGetTokenPairResponse) Reset()         { *m = QueryGetTokenPairResponse{} }
func (m *QueryGetTokenPairResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokenPairResponse) ProtoMessage()    {}
func (*QueryGetTokenPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{15}
}
func (m *QueryGetTokenPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokenPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokenPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokenPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokenPairResponse.Merge(m, src)
}
func (m *QueryGetTokenPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokenPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokenPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokenPairResponse proto.InternalMessageInfo

func (m *QueryGetTokenPairResponse) GetInfo() TokenInfo {
	if m != nil {
		return m.Info
	}
	return TokenInfo{}
}

type QueryGetChainById struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetChainById) Reset()         { *m = QueryGetChainById{} }
func (m *QueryGetChainById) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainById) ProtoMessage()    {}
func (*QueryGetChainById) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{16}
}
func (m *QueryGetChainById) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainById) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainById.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainById) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainById.Merge(m, src)
}
func (m *QueryGetChainById) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainById) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainById.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainById proto.InternalMessageInfo

func (m *QueryGetChainById) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryGetChainByIdResponse struct {
	Chain Chain `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain"`
}

func (m *QueryGetChainByIdResponse) Reset()         { *m = QueryGetChainByIdResponse{} }
func (m *QueryGetChainByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainByIdResponse) ProtoMessage()    {}
func (*QueryGetChainByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{17}
}
func (m *QueryGetChainByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainByIdResponse.Merge(m, src)
}
func (m *QueryGetChainByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainByIdResponse proto.InternalMessageInfo

func (m *QueryGetChainByIdResponse) GetChain() Chain {
	if m != nil {
		return m.Chain
	}
	return Chain{}
}

type QueryGetTxsSubmissions struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetTxsSubmissions) Reset()         { *m = QueryGetTxsSubmissions{} }
func (m *QueryGetTxsSubmissions) String() string { return proto.CompactTextString(m) }
func (*QueryGetTxsSubmissions) ProtoMessage()    {}
func (*QueryGetTxsSubmissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{18}
}
func (m *QueryGetTxsSubmissions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTxsSubmissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTxsSubmissions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTxsSubmissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTxsSubmissions.Merge(m, src)
}
func (m *QueryGetTxsSubmissions) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTxsSubmissions) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTxsSubmissions.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTxsSubmissions proto.InternalMessageInfo

func (m *QueryGetTxsSubmissions) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTxsSubmissionsResponse struct {
	TxsSubmissions []TransactionSubmissions `protobuf:"bytes,1,rep,name=txs_submissions,json=txsSubmissions,proto3" json:"txs_submissions"`
	Pagination     *query.PageResponse      `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetTxsSubmissionsResponse) Reset()         { *m = QueryGetTxsSubmissionsResponse{} }
func (m *QueryGetTxsSubmissionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTxsSubmissionsResponse) ProtoMessage()    {}
func (*QueryGetTxsSubmissionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{19}
}
func (m *QueryGetTxsSubmissionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTxsSubmissionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTxsSubmissionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTxsSubmissionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTxsSubmissionsResponse.Merge(m, src)
}
func (m *QueryGetTxsSubmissionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTxsSubmissionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTxsSubmissionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTxsSubmissionsResponse proto.InternalMessageInfo

func (m *QueryGetTxsSubmissionsResponse) GetTxsSubmissions() []TransactionSubmissions {
	if m != nil {
		return m.TxsSubmissions
	}
	return nil
}

func (m *QueryGetTxsSubmissionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTxSubmissionsByHash struct {
	TxHash string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (m *QueryGetTxSubmissionsByHash) Reset()         { *m = QueryGetTxSubmissionsByHash{} }
func (m *QueryGetTxSubmissionsByHash) String() string { return proto.CompactTextString(m) }
func (*QueryGetTxSubmissionsByHash) ProtoMessage()    {}
func (*QueryGetTxSubmissionsByHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{20}
}
func (m *QueryGetTxSubmissionsByHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTxSubmissionsByHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTxSubmissionsByHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTxSubmissionsByHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTxSubmissionsByHash.Merge(m, src)
}
func (m *QueryGetTxSubmissionsByHash) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTxSubmissionsByHash) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTxSubmissionsByHash.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTxSubmissionsByHash proto.InternalMessageInfo

func (m *QueryGetTxSubmissionsByHash) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

type QueryGetTxSubmissionsByHashResponse struct {
	TxSubmissions TransactionSubmissions `protobuf:"bytes,1,opt,name=tx_submissions,json=txSubmissions,proto3" json:"tx_submissions"`
}

func (m *QueryGetTxSubmissionsByHashResponse) Reset()         { *m = QueryGetTxSubmissionsByHashResponse{} }
func (m *QueryGetTxSubmissionsByHashResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTxSubmissionsByHashResponse) ProtoMessage()    {}
func (*QueryGetTxSubmissionsByHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{21}
}
func (m *QueryGetTxSubmissionsByHashResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTxSubmissionsByHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTxSubmissionsByHashResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTxSubmissionsByHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTxSubmissionsByHashResponse.Merge(m, src)
}
func (m *QueryGetTxSubmissionsByHashResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTxSubmissionsByHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTxSubmissionsByHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTxSubmissionsByHashResponse proto.InternalMessageInfo

func (m *QueryGetTxSubmissionsByHashResponse) GetTxSubmissions() TransactionSubmissions {
	if m != nil {
		return m.TxSubmissions
	}
	return TransactionSubmissions{}
}

type QueryGetReferralById struct {
	ReferralId uint32 `protobuf:"varint,1,opt,name=referral_id,json=referralId,proto3" json:"referral_id,omitempty"`
}

func (m *QueryGetReferralById) Reset()         { *m = QueryGetReferralById{} }
func (m *QueryGetReferralById) String() string { return proto.CompactTextString(m) }
func (*QueryGetReferralById) ProtoMessage()    {}
func (*QueryGetReferralById) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{22}
}
func (m *QueryGetReferralById) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReferralById) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReferralById.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReferralById) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReferralById.Merge(m, src)
}
func (m *QueryGetReferralById) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReferralById) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReferralById.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReferralById proto.InternalMessageInfo

func (m *QueryGetReferralById) GetReferralId() uint32 {
	if m != nil {
		return m.ReferralId
	}
	return 0
}

type QueryGetReferralByIdResponse struct {
	Referral Referral `protobuf:"bytes,1,opt,name=referral,proto3" json:"referral"`
}

func (m *QueryGetReferralByIdResponse) Reset()         { *m = QueryGetReferralByIdResponse{} }
func (m *QueryGetReferralByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetReferralByIdResponse) ProtoMessage()    {}
func (*QueryGetReferralByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{23}
}
func (m *QueryGetReferralByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReferralByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReferralByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReferralByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReferralByIdResponse.Merge(m, src)
}
func (m *QueryGetReferralByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReferralByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReferralByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReferralByIdResponse proto.InternalMessageInfo

func (m *QueryGetReferralByIdResponse) GetReferral() Referral {
	if m != nil {
		return m.Referral
	}
	return Referral{}
}

type QueryGetReferrals struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetReferrals) Reset()         { *m = QueryGetReferrals{} }
func (m *QueryGetReferrals) String() string { return proto.CompactTextString(m) }
func (*QueryGetReferrals) ProtoMessage()    {}
func (*QueryGetReferrals) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{24}
}
func (m *QueryGetReferrals) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReferrals) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReferrals.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReferrals) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReferrals.Merge(m, src)
}
func (m *QueryGetReferrals) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReferrals) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReferrals.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReferrals proto.InternalMessageInfo

func (m *QueryGetReferrals) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetReferralsResponse struct {
	Referrals  []Referral          `protobuf:"bytes,1,rep,name=referrals,proto3" json:"referrals"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetReferralsResponse) Reset()         { *m = QueryGetReferralsResponse{} }
func (m *QueryGetReferralsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetReferralsResponse) ProtoMessage()    {}
func (*QueryGetReferralsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{25}
}
func (m *QueryGetReferralsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReferralsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReferralsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReferralsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReferralsResponse.Merge(m, src)
}
func (m *QueryGetReferralsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReferralsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReferralsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReferralsResponse proto.InternalMessageInfo

func (m *QueryGetReferralsResponse) GetReferrals() []Referral {
	if m != nil {
		return m.Referrals
	}
	return nil
}

func (m *QueryGetReferralsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetReferralRewardByToken struct {
	ReferralId uint32 `protobuf:"varint,1,opt,name=referral_id,json=referralId,proto3" json:"referral_id,omitempty"`
	TokenId    uint64 `protobuf:"varint,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
}

func (m *QueryGetReferralRewardByToken) Reset()         { *m = QueryGetReferralRewardByToken{} }
func (m *QueryGetReferralRewardByToken) String() string { return proto.CompactTextString(m) }
func (*QueryGetReferralRewardByToken) ProtoMessage()    {}
func (*QueryGetReferralRewardByToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{26}
}
func (m *QueryGetReferralRewardByToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReferralRewardByToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReferralRewardByToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReferralRewardByToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReferralRewardByToken.Merge(m, src)
}
func (m *QueryGetReferralRewardByToken) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReferralRewardByToken) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReferralRewardByToken.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReferralRewardByToken proto.InternalMessageInfo

func (m *QueryGetReferralRewardByToken) GetReferralId() uint32 {
	if m != nil {
		return m.ReferralId
	}
	return 0
}

func (m *QueryGetReferralRewardByToken) GetTokenId() uint64 {
	if m != nil {
		return m.TokenId
	}
	return 0
}

type QueryGetReferralRewardByIdResponse struct {
	Rewards ReferralRewards `protobuf:"bytes,1,opt,name=rewards,proto3" json:"rewards"`
}

func (m *QueryGetReferralRewardByIdResponse) Reset()         { *m = QueryGetReferralRewardByIdResponse{} }
func (m *QueryGetReferralRewardByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetReferralRewardByIdResponse) ProtoMessage()    {}
func (*QueryGetReferralRewardByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{27}
}
func (m *QueryGetReferralRewardByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReferralRewardByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReferralRewardByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReferralRewardByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReferralRewardByIdResponse.Merge(m, src)
}
func (m *QueryGetReferralRewardByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReferralRewardByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReferralRewardByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReferralRewardByIdResponse proto.InternalMessageInfo

func (m *QueryGetReferralRewardByIdResponse) GetRewards() ReferralRewards {
	if m != nil {
		return m.Rewards
	}
	return ReferralRewards{}
}

type QueryGetReferralRewardsById struct {
	ReferralId uint32             `protobuf:"varint,1,opt,name=referral_id,json=referralId,proto3" json:"referral_id,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetReferralRewardsById) Reset()         { *m = QueryGetReferralRewardsById{} }
func (m *QueryGetReferralRewardsById) String() string { return proto.CompactTextString(m) }
func (*QueryGetReferralRewardsById) ProtoMessage()    {}
func (*QueryGetReferralRewardsById) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{28}
}
func (m *QueryGetReferralRewardsById) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReferralRewardsById) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReferralRewardsById.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReferralRewardsById) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReferralRewardsById.Merge(m, src)
}
func (m *QueryGetReferralRewardsById) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReferralRewardsById) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReferralRewardsById.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReferralRewardsById proto.InternalMessageInfo

func (m *QueryGetReferralRewardsById) GetReferralId() uint32 {
	if m != nil {
		return m.ReferralId
	}
	return 0
}

func (m *QueryGetReferralRewardsById) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetReferralRewardsByIdResponse struct {
	Rewards    []ReferralRewards   `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetReferralRewardsByIdResponse) Reset()         { *m = QueryGetReferralRewardsByIdResponse{} }
func (m *QueryGetReferralRewardsByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetReferralRewardsByIdResponse) ProtoMessage()    {}
func (*QueryGetReferralRewardsByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{29}
}
func (m *QueryGetReferralRewardsByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReferralRewardsByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReferralRewardsByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReferralRewardsByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReferralRewardsByIdResponse.Merge(m, src)
}
func (m *QueryGetReferralRewardsByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReferralRewardsByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReferralRewardsByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReferralRewardsByIdResponse proto.InternalMessageInfo

func (m *QueryGetReferralRewardsByIdResponse) GetRewards() []ReferralRewards {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *QueryGetReferralRewardsByIdResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetStopListTxById struct {
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TxHash  string `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	TxNonce uint64 `protobuf:"varint,3,opt,name=tx_nonce,json=txNonce,proto3" json:"tx_nonce,omitempty"`
}

func (m *QueryGetStopListTxById) Reset()         { *m = QueryGetStopListTxById{} }
func (m *QueryGetStopListTxById) String() string { return proto.CompactTextString(m) }
func (*QueryGetStopListTxById) ProtoMessage()    {}
func (*QueryGetStopListTxById) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{30}
}
func (m *QueryGetStopListTxById) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStopListTxById) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStopListTxById.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStopListTxById) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStopListTxById.Merge(m, src)
}
func (m *QueryGetStopListTxById) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStopListTxById) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStopListTxById.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStopListTxById proto.InternalMessageInfo

func (m *QueryGetStopListTxById) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *QueryGetStopListTxById) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *QueryGetStopListTxById) GetTxNonce() uint64 {
	if m != nil {
		return m.TxNonce
	}
	return 0
}

type QueryGetStopListTxByIdResponse struct {
	Transaction Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction"`
}

func (m *QueryGetStopListTxByIdResponse) Reset()         { *m = QueryGetStopListTxByIdResponse{} }
func (m *QueryGetStopListTxByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStopListTxByIdResponse) ProtoMessage()    {}
func (*QueryGetStopListTxByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{31}
}
func (m *QueryGetStopListTxByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStopListTxByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStopListTxByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStopListTxByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStopListTxByIdResponse.Merge(m, src)
}
func (m *QueryGetStopListTxByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStopListTxByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStopListTxByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStopListTxByIdResponse proto.InternalMessageInfo

func (m *QueryGetStopListTxByIdResponse) GetTransaction() Transaction {
	if m != nil {
		return m.Transaction
	}
	return Transaction{}
}

type QueryGetStopListTxs struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetStopListTxs) Reset()         { *m = QueryGetStopListTxs{} }
func (m *QueryGetStopListTxs) String() string { return proto.CompactTextString(m) }
func (*QueryGetStopListTxs) ProtoMessage()    {}
func (*QueryGetStopListTxs) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{32}
}
func (m *QueryGetStopListTxs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStopListTxs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStopListTxs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStopListTxs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStopListTxs.Merge(m, src)
}
func (m *QueryGetStopListTxs) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStopListTxs) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStopListTxs.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStopListTxs proto.InternalMessageInfo

func (m *QueryGetStopListTxs) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetStopListTxsResponse struct {
	Transactions []Transaction       `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetStopListTxsResponse) Reset()         { *m = QueryGetStopListTxsResponse{} }
func (m *QueryGetStopListTxsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetStopListTxsResponse) ProtoMessage()    {}
func (*QueryGetStopListTxsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09fd90c905cb448b, []int{33}
}
func (m *QueryGetStopListTxsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetStopListTxsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetStopListTxsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetStopListTxsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetStopListTxsResponse.Merge(m, src)
}
func (m *QueryGetStopListTxsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetStopListTxsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetStopListTxsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetStopListTxsResponse proto.InternalMessageInfo

func (m *QueryGetStopListTxsResponse) GetTransactions() []Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *QueryGetStopListTxsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "core.bridge.QueryParamsRequest")
	proto.RegisterType((*QueryTransactionByIdRequest)(nil), "core.bridge.QueryTransactionByIdRequest")
	proto.RegisterType((*QueryTransactionByIdResponse)(nil), "core.bridge.QueryTransactionByIdResponse")
	proto.RegisterType((*QueryParamsResponse)(nil), "core.bridge.QueryParamsResponse")
	proto.RegisterType((*QueryTransactionsRequest)(nil), "core.bridge.QueryTransactionsRequest")
	proto.RegisterType((*QueryTransactionsResponse)(nil), "core.bridge.QueryTransactionsResponse")
	proto.RegisterType((*QueryGetTokenById)(nil), "core.bridge.QueryGetTokenById")
	proto.RegisterType((*QueryGetTokenByIdResponse)(nil), "core.bridge.QueryGetTokenByIdResponse")
	proto.RegisterType((*QueryGetTokens)(nil), "core.bridge.QueryGetTokens")
	proto.RegisterType((*QueryGetTokensResponse)(nil), "core.bridge.QueryGetTokensResponse")
	proto.RegisterType((*QueryGetChains)(nil), "core.bridge.QueryGetChains")
	proto.RegisterType((*QueryGetChainsResponse)(nil), "core.bridge.QueryGetChainsResponse")
	proto.RegisterType((*QueryGetTokenPair)(nil), "core.bridge.QueryGetTokenPair")
	proto.RegisterType((*QueryGetTokenInfo)(nil), "core.bridge.QueryGetTokenInfo")
	proto.RegisterType((*QueryGetTokenInfoResponse)(nil), "core.bridge.QueryGetTokenInfoResponse")
	proto.RegisterType((*QueryGetTokenPairResponse)(nil), "core.bridge.QueryGetTokenPairResponse")
	proto.RegisterType((*QueryGetChainById)(nil), "core.bridge.QueryGetChainById")
	proto.RegisterType((*QueryGetChainByIdResponse)(nil), "core.bridge.QueryGetChainByIdResponse")
	proto.RegisterType((*QueryGetTxsSubmissions)(nil), "core.bridge.QueryGetTxsSubmissions")
	proto.RegisterType((*QueryGetTxsSubmissionsResponse)(nil), "core.bridge.QueryGetTxsSubmissionsResponse")
	proto.RegisterType((*QueryGetTxSubmissionsByHash)(nil), "core.bridge.QueryGetTxSubmissionsByHash")
	proto.RegisterType((*QueryGetTxSubmissionsByHashResponse)(nil), "core.bridge.QueryGetTxSubmissionsByHashResponse")
	proto.RegisterType((*QueryGetReferralById)(nil), "core.bridge.QueryGetReferralById")
	proto.RegisterType((*QueryGetReferralByIdResponse)(nil), "core.bridge.QueryGetReferralByIdResponse")
	proto.RegisterType((*QueryGetReferrals)(nil), "core.bridge.QueryGetReferrals")
	proto.RegisterType((*QueryGetReferralsResponse)(nil), "core.bridge.QueryGetReferralsResponse")
	proto.RegisterType((*QueryGetReferralRewardByToken)(nil), "core.bridge.QueryGetReferralRewardByToken")
	proto.RegisterType((*QueryGetReferralRewardByIdResponse)(nil), "core.bridge.QueryGetReferralRewardByIdResponse")
	proto.RegisterType((*QueryGetReferralRewardsById)(nil), "core.bridge.QueryGetReferralRewardsById")
	proto.RegisterType((*QueryGetReferralRewardsByIdResponse)(nil), "core.bridge.QueryGetReferralRewardsByIdResponse")
	proto.RegisterType((*QueryGetStopListTxById)(nil), "core.bridge.QueryGetStopListTxById")
	proto.RegisterType((*QueryGetStopListTxByIdResponse)(nil), "core.bridge.QueryGetStopListTxByIdResponse")
	proto.RegisterType((*QueryGetStopListTxs)(nil), "core.bridge.QueryGetStopListTxs")
	proto.RegisterType((*QueryGetStopListTxsResponse)(nil), "core.bridge.QueryGetStopListTxsResponse")
}

func init() { proto.RegisterFile("bridge/query.proto", fileDescriptor_09fd90c905cb448b) }

var fileDescriptor_09fd90c905cb448b = []byte{
	// 1531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcf, 0x6f, 0x13, 0x47,
	0x14, 0xce, 0x3a, 0x21, 0x21, 0x2f, 0x10, 0xc4, 0x24, 0x10, 0xc7, 0x49, 0x9c, 0x74, 0xa2, 0xa6,
	0x2e, 0x08, 0x6f, 0x02, 0x12, 0x08, 0xd1, 0x0a, 0x08, 0x52, 0x21, 0xea, 0x0f, 0xa5, 0x06, 0xa9,
	0x15, 0xa8, 0x0a, 0x6b, 0xef, 0xe2, 0x2c, 0x75, 0xbc, 0x66, 0x67, 0x03, 0x4e, 0x2d, 0x5f, 0x38,
	0x70, 0xa9, 0xaa, 0x56, 0xe2, 0x0f, 0xe0, 0xd6, 0x56, 0xfd, 0xf1, 0x17, 0x54, 0xbd, 0x73, 0x44,
	0xea, 0xa5, 0xa7, 0xaa, 0x82, 0xfe, 0x21, 0xd5, 0xbe, 0x99, 0xdd, 0x9d, 0x59, 0xef, 0xae, 0x4d,
	0xeb, 0x4a, 0xbd, 0x79, 0x77, 0xbe, 0x79, 0xef, 0x7b, 0x6f, 0xbe, 0x99, 0xfd, 0xc6, 0x40, 0xaa,
	0xae, 0x6d, 0xd6, 0x2d, 0xfd, 0xc1, 0xbe, 0xe5, 0x1e, 0x94, 0x5b, 0xae, 0xe3, 0x39, 0x64, 0xaa,
	0xe6, 0xb8, 0x56, 0x99, 0x0f, 0x14, 0x66, 0xeb, 0x4e, 0xdd, 0xc1, 0xf7, 0xba, 0xff, 0x8b, 0x43,
	0x0a, 0x8b, 0x75, 0xc7, 0xa9, 0x37, 0x2c, 0xdd, 0x68, 0xd9, 0xba, 0xd1, 0x6c, 0x3a, 0x9e, 0xe1,
	0xd9, 0x4e, 0x93, 0x89, 0xd1, 0x53, 0x35, 0x87, 0xed, 0x39, 0x4c, 0xaf, 0x1a, 0x4c, 0x44, 0xd6,
	0x1f, 0x6e, 0x54, 0x2d, 0xcf, 0xd8, 0xd0, 0x5b, 0x46, 0xdd, 0x6e, 0x22, 0x58, 0x60, 0x67, 0x04,
	0x81, 0x96, 0xe1, 0x1a, 0x7b, 0x41, 0x80, 0x65, 0xf1, 0x72, 0xcf, 0x31, 0xad, 0x06, 0xd3, 0x3d,
	0xd7, 0x68, 0x32, 0xa3, 0x26, 0xcd, 0x9a, 0x8f, 0x01, 0x9c, 0xcf, 0xad, 0x94, 0xa1, 0xda, 0xae,
	0x61, 0x07, 0x43, 0x4b, 0xea, 0x90, 0x6b, 0xdd, 0xb3, 0x5c, 0xd7, 0x68, 0x88, 0xac, 0x74, 0x16,
	0xc8, 0xc7, 0x3e, 0xd9, 0x6d, 0xa4, 0x52, 0xb1, 0x1e, 0xec, 0x5b, 0xcc, 0xa3, 0x0d, 0x58, 0xc0,
	0xb7, 0xb7, 0x22, 0x12, 0x9b, 0x07, 0x5b, 0xa6, 0x18, 0x26, 0xf3, 0x70, 0x18, 0x53, 0xec, 0xd8,
	0x66, 0x5e, 0x5b, 0xd1, 0x4a, 0x93, 0x95, 0x09, 0x7c, 0xde, 0x32, 0xc9, 0x1c, 0x4c, 0x78, 0xed,
	0x9d, 0x5d, 0x83, 0xed, 0xe6, 0x73, 0x38, 0x32, 0xee, 0xb5, 0x6f, 0x18, 0x6c, 0xd7, 0x9f, 0xe3,
	0xb5, 0x77, 0x9a, 0x4e, 0xb3, 0x66, 0xe5, 0x47, 0x57, 0xb4, 0xd2, 0x58, 0x65, 0xc2, 0x6b, 0x7f,
	0xe4, 0x3f, 0xd2, 0xbb, 0xb0, 0x98, 0x9c, 0x8d, 0xb5, 0x9c, 0x26, 0xb3, 0xc8, 0x15, 0x98, 0x92,
	0xba, 0x81, 0x19, 0xa7, 0xce, 0xe6, 0xcb, 0xd2, 0x8a, 0x95, 0xe5, 0xa9, 0x63, 0xcf, 0xff, 0x58,
	0x1e, 0xa9, 0xc8, 0x53, 0xe8, 0x0d, 0x98, 0x51, 0xaa, 0x14, 0x81, 0x37, 0x60, 0x9c, 0x2f, 0x81,
	0x88, 0x39, 0xa3, 0xc4, 0xe4, 0x60, 0x11, 0x4e, 0x00, 0x69, 0x15, 0xf2, 0x71, 0xae, 0x41, 0xd7,
	0xc8, 0x7b, 0x00, 0xd1, 0x52, 0x8b, 0x90, 0x6b, 0x65, 0xae, 0x8b, 0xb2, 0xaf, 0x8b, 0x32, 0x57,
	0x9c, 0xd0, 0x45, 0x79, 0xdb, 0xa8, 0x5b, 0x62, 0x6e, 0x45, 0x9a, 0x49, 0xbf, 0xd7, 0x60, 0x3e,
	0x21, 0x89, 0x20, 0xbd, 0x09, 0x47, 0xa4, 0xd2, 0x7c, 0xea, 0xa3, 0x03, 0xb4, 0x43, 0x99, 0x43,
	0xae, 0x2b, 0x4c, 0x73, 0xc8, 0xf4, 0xad, 0xbe, 0x4c, 0x39, 0x01, 0x85, 0xea, 0x2a, 0x1c, 0x47,
	0xa6, 0xd7, 0x2d, 0xef, 0x96, 0xaf, 0x47, 0x7f, 0xdd, 0xc8, 0x34, 0xe4, 0x84, 0x30, 0xc6, 0x2a,
	0x39, 0xdb, 0xa4, 0xef, 0x8b, 0x72, 0x64, 0x50, 0x58, 0x4e, 0x19, 0x0e, 0xa1, 0x92, 0x45, 0xbf,
	0x88, 0x5a, 0x07, 0xc2, 0x79, 0x05, 0x1c, 0x46, 0x3f, 0x85, 0x69, 0x25, 0x18, 0x1b, 0x5a, 0xdb,
	0x9f, 0x6a, 0x70, 0x52, 0x0d, 0x1d, 0x92, 0x5c, 0x87, 0x71, 0xcc, 0x1e, 0x74, 0x3b, 0x9d, 0xa5,
	0xc0, 0x0d, 0xaf, 0xc3, 0x52, 0xbd, 0xd7, 0xfc, 0x3d, 0xf6, 0xdf, 0xd4, 0xcb, 0x43, 0xcb, 0xf5,
	0xe2, 0x86, 0x4e, 0xae, 0x17, 0xc1, 0x41, 0xbd, 0x1c, 0x37, 0xbc, 0x7a, 0x9b, 0x31, 0x45, 0x6d,
	0x1b, 0xb6, 0x4b, 0x16, 0x60, 0x92, 0xb9, 0xb5, 0x1d, 0xcc, 0x25, 0x4e, 0x9c, 0xc3, 0xcc, 0xad,
	0x21, 0x11, 0xb2, 0x0c, 0x53, 0xfe, 0xa0, 0x61, 0x9a, 0xae, 0xc5, 0x98, 0x38, 0x76, 0x80, 0xb9,
	0xb5, 0xab, 0xfc, 0x8d, 0x3f, 0xdb, 0x64, 0x9e, 0x98, 0x3d, 0xca, 0x67, 0x9b, 0x8c, 0xd7, 0x4c,
	0xaf, 0xc5, 0xf2, 0x6d, 0x35, 0xef, 0x39, 0x64, 0x16, 0x0e, 0xc9, 0xb9, 0xf8, 0x03, 0xc9, 0xc3,
	0x84, 0x9a, 0x24, 0x78, 0xa4, 0x1f, 0xc6, 0x14, 0xee, 0x07, 0x91, 0x9a, 0x39, 0x66, 0x37, 0xef,
	0x39, 0x62, 0xa5, 0x4e, 0xf6, 0x4a, 0xc7, 0x47, 0x8b, 0x76, 0x22, 0xb2, 0x27, 0x9c, 0xdf, 0x83,
	0x7f, 0x11, 0x4e, 0xda, 0xa4, 0x7c, 0xe9, 0xd4, 0x4d, 0x3a, 0x19, 0xdf, 0xa4, 0x21, 0x48, 0xde,
	0xa4, 0x51, 0x3f, 0xb2, 0xe4, 0xc0, 0x61, 0xf4, 0xae, 0xb4, 0x93, 0xda, 0xec, 0xe6, 0x7e, 0x75,
	0xcf, 0x66, 0x0c, 0x4f, 0x9e, 0x61, 0x89, 0xf7, 0x57, 0x0d, 0x8a, 0xc9, 0x29, 0x42, 0xd2, 0x15,
	0x38, 0xe6, 0xb5, 0xd9, 0x0e, 0x8b, 0x86, 0x84, 0x9a, 0x57, 0xd3, 0xce, 0x4a, 0x29, 0x8a, 0xa8,
	0x67, 0xda, 0x53, 0xe9, 0x0f, 0x4d, 0xe6, 0xe7, 0xc5, 0x17, 0x16, 0xe9, 0xcb, 0x79, 0x0f, 0xf0,
	0x6b, 0x29, 0x7d, 0x46, 0x35, 0xf9, 0x33, 0x4a, 0x1f, 0xc1, 0x6a, 0xc6, 0xbc, 0xb0, 0xf6, 0x6d,
	0x98, 0xf6, 0xda, 0xb1, 0xd2, 0xb5, 0xd7, 0x2b, 0xfd, 0xa8, 0x27, 0xc7, 0xa7, 0x17, 0x60, 0x36,
	0x48, 0x5c, 0x11, 0x1e, 0x02, 0x75, 0xb4, 0x0c, 0x53, 0x81, 0xa7, 0x08, 0xec, 0xc0, 0xd1, 0x0a,
	0x04, 0xaf, 0xb6, 0x4c, 0xfa, 0x89, 0xf8, 0xba, 0xc7, 0x26, 0x86, 0x54, 0x2f, 0xc0, 0xe1, 0x00,
	0x2d, 0x48, 0x9e, 0x50, 0x48, 0x86, 0x93, 0x38, 0xad, 0x10, 0x4c, 0xef, 0x44, 0xb2, 0x0e, 0x30,
	0xc3, 0xd3, 0xd7, 0x33, 0x2d, 0xda, 0x0f, 0x61, 0xf4, 0x90, 0xf3, 0x45, 0x98, 0x0c, 0x8d, 0x94,
	0x10, 0x55, 0x26, 0xe9, 0x08, 0x3d, 0x3c, 0x05, 0xdd, 0x81, 0xa5, 0x38, 0xc1, 0x8a, 0xf5, 0xc8,
	0x70, 0xcd, 0xcd, 0x03, 0x3c, 0x06, 0xfa, 0xae, 0x0c, 0x5a, 0x32, 0x1f, 0xe9, 0x8f, 0xe6, 0x84,
	0x25, 0xc3, 0x03, 0xc4, 0xa4, 0x55, 0xa0, 0x69, 0xc1, 0xa5, 0xa5, 0x7b, 0x07, 0x26, 0x5c, 0x7c,
	0x1b, 0xc8, 0x6b, 0x31, 0xb1, 0x09, 0x7c, 0x66, 0xa0, 0xab, 0x60, 0x0a, 0x7d, 0xa2, 0x45, 0x7b,
	0x20, 0x0e, 0x1d, 0x44, 0x59, 0xb1, 0xb5, 0xce, 0xfd, 0xe3, 0xb5, 0xfe, 0x49, 0x8b, 0x36, 0x55,
	0x02, 0x91, 0xe4, 0x72, 0x47, 0x5f, 0xb3, 0xdc, 0xe1, 0x2d, 0x7c, 0x3d, 0x3a, 0x5c, 0x6f, 0x7a,
	0x4e, 0xeb, 0x03, 0x9b, 0x79, 0xb7, 0xda, 0xd8, 0xb1, 0x21, 0xfb, 0xf2, 0x6a, 0x74, 0xc4, 0xaa,
	0x89, 0x86, 0xe8, 0xcc, 0x3f, 0x13, 0xce, 0x5c, 0xc9, 0x31, 0xbc, 0x6d, 0xfc, 0x83, 0xa4, 0x31,
	0x29, 0xfe, 0xff, 0xd2, 0x4c, 0x9f, 0x7d, 0x32, 0x03, 0x87, 0x90, 0x2c, 0xb9, 0x0f, 0xe3, 0xfc,
	0xf6, 0x41, 0x96, 0x15, 0x2a, 0xbd, 0x57, 0xb5, 0xc2, 0x4a, 0x3a, 0x80, 0xa7, 0xa0, 0x4b, 0x8f,
	0x7f, 0xfb, 0xeb, 0x69, 0x6e, 0x8e, 0x9c, 0xd0, 0x83, 0x2b, 0xaa, 0x7c, 0xfb, 0x24, 0x8f, 0x35,
	0x38, 0x22, 0x5f, 0x34, 0xc8, 0x9b, 0xbd, 0x11, 0x13, 0x6e, 0x3b, 0x85, 0xb5, 0x7e, 0x30, 0x91,
	0x7e, 0x15, 0xd3, 0x2f, 0x91, 0x85, 0x58, 0x7a, 0xa5, 0x87, 0x3f, 0x6a, 0x70, 0x2c, 0x76, 0xfd,
	0x23, 0xa5, 0xcc, 0x04, 0xd2, 0x7d, 0xb4, 0xf0, 0xf6, 0x00, 0x48, 0xc1, 0xe6, 0x1a, 0xb2, 0x79,
	0x97, 0x5c, 0xca, 0x60, 0xa3, 0x77, 0x82, 0x5d, 0xd4, 0xd5, 0x3b, 0x62, 0xd7, 0xf0, 0x5f, 0xb8,
	0x4d, 0xba, 0xe4, 0x0b, 0x38, 0xa2, 0x5c, 0x78, 0x8a, 0xbd, 0xf9, 0xe5, 0xf1, 0xa4, 0x56, 0x25,
	0xdd, 0x85, 0x28, 0x45, 0x72, 0x8b, 0xa4, 0x10, 0x27, 0x87, 0x77, 0x0a, 0xbd, 0x63, 0x9b, 0x5d,
	0xd2, 0x80, 0xc9, 0xe8, 0xea, 0xb3, 0x90, 0x1e, 0x98, 0x15, 0x56, 0x33, 0x06, 0xfb, 0x8a, 0x43,
	0x5c, 0x63, 0x9e, 0x69, 0x51, 0xa9, 0xe8, 0xc4, 0x33, 0x4a, 0xf5, 0xc7, 0xb3, 0x4a, 0x95, 0x5d,
	0x2c, 0xbd, 0x8e, 0x79, 0xaf, 0x92, 0xcb, 0x49, 0x79, 0xcf, 0xb4, 0x0c, 0xdb, 0xd5, 0x3b, 0xa1,
	0xe5, 0xef, 0xf2, 0xdf, 0xc2, 0x6d, 0x77, 0xf5, 0x4e, 0x68, 0xe7, 0xbb, 0xe4, 0x4b, 0x89, 0x21,
	0x7a, 0xf7, 0x0c, 0x86, 0xfe, 0x78, 0x16, 0x43, 0xd9, 0xb6, 0xd3, 0x73, 0xc8, 0xf0, 0x0c, 0x39,
	0x9d, 0xc8, 0xd0, 0x37, 0xd6, 0x42, 0x27, 0x5d, 0xbd, 0x13, 0x30, 0x13, 0xca, 0x88, 0x5c, 0x76,
	0x32, 0x99, 0x70, 0x3c, 0x85, 0x4c, 0x8f, 0x01, 0x4f, 0x55, 0x06, 0xbf, 0x7d, 0xc9, 0xca, 0x10,
	0x97, 0xc4, 0x85, 0xf4, 0xc0, 0x69, 0xca, 0x50, 0xef, 0x80, 0xa9, 0xca, 0x10, 0x17, 0xbe, 0xaf,
	0x34, 0x38, 0xde, 0x6b, 0xef, 0x53, 0x34, 0xa7, 0x80, 0x0a, 0xa7, 0x07, 0x00, 0x85, 0x34, 0xd6,
	0x90, 0xc6, 0x0a, 0x29, 0xc6, 0x97, 0x41, 0xb5, 0xf6, 0xe4, 0x5b, 0x0d, 0x4e, 0xa6, 0x98, 0xe9,
	0x52, 0x4a, 0xbe, 0x1e, 0x64, 0x61, 0x7d, 0x50, 0x64, 0x48, 0x6f, 0x1d, 0xe9, 0x9d, 0x22, 0xa5,
	0x6c, 0x7a, 0xd1, 0x39, 0x42, 0xbe, 0xd6, 0xe0, 0x58, 0xdc, 0x44, 0xbf, 0x91, 0x98, 0x57, 0x86,
	0x24, 0x9d, 0x71, 0x29, 0x8e, 0x9a, 0x96, 0x91, 0x53, 0x89, 0xac, 0xc5, 0x38, 0x85, 0x26, 0x54,
	0xef, 0x48, 0xc6, 0xaa, 0x4b, 0xda, 0x28, 0xda, 0xc8, 0x43, 0x17, 0x33, 0x53, 0xb1, 0x14, 0xd1,
	0xf6, 0xb8, 0x64, 0xba, 0x82, 0x3c, 0x0a, 0x24, 0x9f, 0xc6, 0x83, 0xfc, 0xa2, 0xc1, 0x7c, 0x92,
	0xe9, 0xe2, 0x06, 0xf6, 0x54, 0x66, 0x1e, 0xc5, 0xec, 0x16, 0xf4, 0x81, 0xb0, 0x52, 0x93, 0xae,
	0x22, 0xb9, 0x4b, 0xe4, 0x62, 0x6a, 0x93, 0x84, 0x71, 0x53, 0x9b, 0xa5, 0x77, 0x02, 0xcb, 0xdc,
	0x25, 0x3f, 0x6b, 0x30, 0xa7, 0x16, 0x1e, 0x99, 0xd7, 0xd2, 0x00, 0x7c, 0x10, 0x99, 0xa2, 0xb9,
	0x0c, 0x1f, 0x4a, 0xcf, 0x23, 0xf5, 0x75, 0x52, 0x7e, 0x3d, 0xea, 0xe4, 0x3b, 0x0d, 0x88, 0xea,
	0x83, 0x90, 0x6a, 0xf2, 0x9e, 0x55, 0x1d, 0x5f, 0xca, 0x9e, 0x4d, 0xb6, 0x85, 0xf4, 0x32, 0x12,
	0xbc, 0x48, 0x2e, 0xc4, 0x08, 0x32, 0xcf, 0x69, 0x35, 0x6c, 0xe6, 0xf5, 0xfd, 0xc0, 0x76, 0x61,
	0x3a, 0x66, 0x08, 0x57, 0xfa, 0xe4, 0x67, 0x85, 0x52, 0x3f, 0x44, 0x48, 0x6f, 0x19, 0xe9, 0xcd,
	0x93, 0xb9, 0x14, 0x7a, 0x9b, 0xb7, 0x9f, 0xbf, 0x2c, 0x6a, 0x2f, 0x5e, 0x16, 0xb5, 0x3f, 0x5f,
	0x16, 0xb5, 0x6f, 0x5e, 0x15, 0x47, 0x5e, 0xbc, 0x2a, 0x8e, 0xfc, 0xfe, 0xaa, 0x38, 0x72, 0xfb,
	0x4a, 0xdd, 0xf6, 0x76, 0xf7, 0xab, 0xe5, 0x9a, 0xb3, 0xa7, 0x6f, 0xe2, 0xac, 0x86, 0xc5, 0xd8,
	0x99, 0x6d, 0xd7, 0xb9, 0x6f, 0xd5, 0x3c, 0x11, 0x08, 0x5f, 0xf9, 0x64, 0xf4, 0x87, 0x1b, 0x67,
	0xf5, 0x76, 0x78, 0x24, 0x1c, 0xb4, 0x2c, 0x56, 0x1d, 0xc7, 0xff, 0xdd, 0xcf, 0xfd, 0x1d, 0x00,
	0x00, 0xff, 0xff, 0xca, 0xb2, 0xa1, 0xef, 0x85, 0x18, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Transactions queries all the transactions.
	Transactions(ctx context.Context, in *QueryTransactionsRequest, opts ...grpc.CallOption) (*QueryTransactionsResponse, error)
	// TransactionById queries a transaction by ID.
	TransactionById(ctx context.Context, in *QueryTransactionByIdRequest, opts ...grpc.CallOption) (*QueryTransactionByIdResponse, error)
	// Token by id queries a token by id.
	GetTokenById(ctx context.Context, in *QueryGetTokenById, opts ...grpc.CallOption) (*QueryGetTokenByIdResponse, error)
	// Tokens queries all the tokens.
	GetTokens(ctx context.Context, in *QueryGetTokens, opts ...grpc.CallOption) (*QueryGetTokensResponse, error)
	// TokenPair queries an according token pair by src_chain, src_address and dst_chain.
	GetTokenPair(ctx context.Context, in *QueryGetTokenPair, opts ...grpc.CallOption) (*QueryGetTokenPairResponse, error)
	// TokenInfo queries an according token info by chain and address.
	GetTokenInfo(ctx context.Context, in *QueryGetTokenInfo, opts ...grpc.CallOption) (*QueryGetTokenInfoResponse, error)
	GetChainById(ctx context.Context, in *QueryGetChainById, opts ...grpc.CallOption) (*QueryGetChainByIdResponse, error)
	GetChains(ctx context.Context, in *QueryGetChains, opts ...grpc.CallOption) (*QueryGetChainsResponse, error)
	GetTxsSubmissions(ctx context.Context, in *QueryGetTxsSubmissions, opts ...grpc.CallOption) (*QueryGetTxsSubmissionsResponse, error)
	GetTxSubmissionsByHash(ctx context.Context, in *QueryGetTxSubmissionsByHash, opts ...grpc.CallOption) (*QueryGetTxSubmissionsByHashResponse, error)
	GetReferralById(ctx context.Context, in *QueryGetReferralById, opts ...grpc.CallOption) (*QueryGetReferralByIdResponse, error)
	GetReferrals(ctx context.Context, in *QueryGetReferrals, opts ...grpc.CallOption) (*QueryGetReferralsResponse, error)
	GetReferralRewardsByToken(ctx context.Context, in *QueryGetReferralRewardByToken, opts ...grpc.CallOption) (*QueryGetReferralRewardByIdResponse, error)
	GetReferralsRewardsById(ctx context.Context, in *QueryGetReferralRewardsById, opts ...grpc.CallOption) (*QueryGetReferralRewardsByIdResponse, error)
	GetStopListTxsById(ctx context.Context, in *QueryGetStopListTxById, opts ...grpc.CallOption) (*QueryGetStopListTxByIdResponse, error)
	GetStopListTxs(ctx context.Context, in *QueryGetStopListTxs, opts ...grpc.CallOption) (*QueryGetStopListTxsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/core.bridge.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Transactions(ctx context.Context, in *QueryTransactionsRequest, opts ...grpc.CallOption) (*QueryTransactionsResponse, error) {
	out := new(QueryTransactionsResponse)
	err := c.cc.Invoke(ctx, "/core.bridge.Query/Transactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TransactionById(ctx context.Context, in *QueryTransactionByIdRequest, opts ...grpc.CallOption) (*QueryTransactionByIdResponse, error) {
	out := new(QueryTransactionByIdResponse)
	err := c.cc.Invoke(ctx, "/core.bridge.Query/TransactionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTokenById(ctx context.Context, in *QueryGetTokenById, opts ...grpc.CallOption) (*QueryGetTokenByIdResponse, error) {
	out := new(QueryGetTokenByIdResponse)
	err := c.cc.Invoke(ctx, "/core.bridge.Query/GetTokenById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTokens(ctx context.Context, in *QueryGetTokens, opts ...grpc.CallOption) (*QueryGetTokensResponse, error) {
	out := new(QueryGetTokensResponse)
	err := c.cc.Invoke(ctx, "/core.bridge.Query/GetTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTokenPair(ctx context.Context, in *QueryGetTokenPair, opts ...grpc.CallOption) (*QueryGetTokenPairResponse, error) {
	out := new(QueryGetTokenPairResponse)
	err := c.cc.Invoke(ctx, "/core.bridge.Query/GetTokenPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTokenInfo(ctx context.Context, in *QueryGetTokenInfo, opts ...grpc.CallOption) (*QueryGetTokenInfoResponse, error) {
	out := new(QueryGetTokenInfoResponse)
	err := c.cc.Invoke(ctx, "/core.bridge.Query/GetTokenInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetChainById(ctx context.Context, in *QueryGetChainById, opts ...grpc.CallOption) (*QueryGetChainByIdResponse, error) {
	out := new(QueryGetChainByIdResponse)
	err := c.cc.Invoke(ctx, "/core.bridge.Query/GetChainById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetChains(ctx context.Context, in *QueryGetChains, opts ...grpc.CallOption) (*QueryGetChainsResponse, error) {
	out := new(QueryGetChainsResponse)
	err := c.cc.Invoke(ctx, "/core.bridge.Query/GetChains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTxsSubmissions(ctx context.Context, in *QueryGetTxsSubmissions, opts ...grpc.CallOption) (*QueryGetTxsSubmissionsResponse, error) {
	out := new(QueryGetTxsSubmissionsResponse)
	err := c.cc.Invoke(ctx, "/core.bridge.Query/GetTxsSubmissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTxSubmissionsByHash(ctx context.Context, in *QueryGetTxSubmissionsByHash, opts ...grpc.CallOption) (*QueryGetTxSubmissionsByHashResponse, error) {
	out := new(QueryGetTxSubmissionsByHashResponse)
	err := c.cc.Invoke(ctx, "/core.bridge.Query/GetTxSubmissionsByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetReferralById(ctx context.Context, in *QueryGetReferralById, opts ...grpc.CallOption) (*QueryGetReferralByIdResponse, error) {
	out := new(QueryGetReferralByIdResponse)
	err := c.cc.Invoke(ctx, "/core.bridge.Query/GetReferralById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetReferrals(ctx context.Context, in *QueryGetReferrals, opts ...grpc.CallOption) (*QueryGetReferralsResponse, error) {
	out := new(QueryGetReferralsResponse)
	err := c.cc.Invoke(ctx, "/core.bridge.Query/GetReferrals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetReferralRewardsByToken(ctx context.Context, in *QueryGetReferralRewardByToken, opts ...grpc.CallOption) (*QueryGetReferralRewardByIdResponse, error) {
	out := new(QueryGetReferralRewardByIdResponse)
	err := c.cc.Invoke(ctx, "/core.bridge.Query/GetReferralRewardsByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetReferralsRewardsById(ctx context.Context, in *QueryGetReferralRewardsById, opts ...grpc.CallOption) (*QueryGetReferralRewardsByIdResponse, error) {
	out := new(QueryGetReferralRewardsByIdResponse)
	err := c.cc.Invoke(ctx, "/core.bridge.Query/GetReferralsRewardsById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStopListTxsById(ctx context.Context, in *QueryGetStopListTxById, opts ...grpc.CallOption) (*QueryGetStopListTxByIdResponse, error) {
	out := new(QueryGetStopListTxByIdResponse)
	err := c.cc.Invoke(ctx, "/core.bridge.Query/GetStopListTxsById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetStopListTxs(ctx context.Context, in *QueryGetStopListTxs, opts ...grpc.CallOption) (*QueryGetStopListTxsResponse, error) {
	out := new(QueryGetStopListTxsResponse)
	err := c.cc.Invoke(ctx, "/core.bridge.Query/GetStopListTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Transactions queries all the transactions.
	Transactions(context.Context, *QueryTransactionsRequest) (*QueryTransactionsResponse, error)
	// TransactionById queries a transaction by ID.
	TransactionById(context.Context, *QueryTransactionByIdRequest) (*QueryTransactionByIdResponse, error)
	// Token by id queries a token by id.
	GetTokenById(context.Context, *QueryGetTokenById) (*QueryGetTokenByIdResponse, error)
	// Tokens queries all the tokens.
	GetTokens(context.Context, *QueryGetTokens) (*QueryGetTokensResponse, error)
	// TokenPair queries an according token pair by src_chain, src_address and dst_chain.
	GetTokenPair(context.Context, *QueryGetTokenPair) (*QueryGetTokenPairResponse, error)
	// TokenInfo queries an according token info by chain and address.
	GetTokenInfo(context.Context, *QueryGetTokenInfo) (*QueryGetTokenInfoResponse, error)
	GetChainById(context.Context, *QueryGetChainById) (*QueryGetChainByIdResponse, error)
	GetChains(context.Context, *QueryGetChains) (*QueryGetChainsResponse, error)
	GetTxsSubmissions(context.Context, *QueryGetTxsSubmissions) (*QueryGetTxsSubmissionsResponse, error)
	GetTxSubmissionsByHash(context.Context, *QueryGetTxSubmissionsByHash) (*QueryGetTxSubmissionsByHashResponse, error)
	GetReferralById(context.Context, *QueryGetReferralById) (*QueryGetReferralByIdResponse, error)
	GetReferrals(context.Context, *QueryGetReferrals) (*QueryGetReferralsResponse, error)
	GetReferralRewardsByToken(context.Context, *QueryGetReferralRewardByToken) (*QueryGetReferralRewardByIdResponse, error)
	GetReferralsRewardsById(context.Context, *QueryGetReferralRewardsById) (*QueryGetReferralRewardsByIdResponse, error)
	GetStopListTxsById(context.Context, *QueryGetStopListTxById) (*QueryGetStopListTxByIdResponse, error)
	GetStopListTxs(context.Context, *QueryGetStopListTxs) (*QueryGetStopListTxsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Transactions(ctx context.Context, req *QueryTransactionsRequest) (*QueryTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transactions not implemented")
}
func (*UnimplementedQueryServer) TransactionById(ctx context.Context, req *QueryTransactionByIdRequest) (*QueryTransactionByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionById not implemented")
}
func (*UnimplementedQueryServer) GetTokenById(ctx context.Context, req *QueryGetTokenById) (*QueryGetTokenByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenById not implemented")
}
func (*UnimplementedQueryServer) GetTokens(ctx context.Context, req *QueryGetTokens) (*QueryGetTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokens not implemented")
}
func (*UnimplementedQueryServer) GetTokenPair(ctx context.Context, req *QueryGetTokenPair) (*QueryGetTokenPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenPair not implemented")
}
func (*UnimplementedQueryServer) GetTokenInfo(ctx context.Context, req *QueryGetTokenInfo) (*QueryGetTokenInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenInfo not implemented")
}
func (*UnimplementedQueryServer) GetChainById(ctx context.Context, req *QueryGetChainById) (*QueryGetChainByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainById not implemented")
}
func (*UnimplementedQueryServer) GetChains(ctx context.Context, req *QueryGetChains) (*QueryGetChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChains not implemented")
}
func (*UnimplementedQueryServer) GetTxsSubmissions(ctx context.Context, req *QueryGetTxsSubmissions) (*QueryGetTxsSubmissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxsSubmissions not implemented")
}
func (*UnimplementedQueryServer) GetTxSubmissionsByHash(ctx context.Context, req *QueryGetTxSubmissionsByHash) (*QueryGetTxSubmissionsByHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxSubmissionsByHash not implemented")
}
func (*UnimplementedQueryServer) GetReferralById(ctx context.Context, req *QueryGetReferralById) (*QueryGetReferralByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferralById not implemented")
}
func (*UnimplementedQueryServer) GetReferrals(ctx context.Context, req *QueryGetReferrals) (*QueryGetReferralsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferrals not implemented")
}
func (*UnimplementedQueryServer) GetReferralRewardsByToken(ctx context.Context, req *QueryGetReferralRewardByToken) (*QueryGetReferralRewardByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferralRewardsByToken not implemented")
}
func (*UnimplementedQueryServer) GetReferralsRewardsById(ctx context.Context, req *QueryGetReferralRewardsById) (*QueryGetReferralRewardsByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferralsRewardsById not implemented")
}
func (*UnimplementedQueryServer) GetStopListTxsById(ctx context.Context, req *QueryGetStopListTxById) (*QueryGetStopListTxByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStopListTxsById not implemented")
}
func (*UnimplementedQueryServer) GetStopListTxs(ctx context.Context, req *QueryGetStopListTxs) (*QueryGetStopListTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStopListTxs not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.bridge.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Transactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Transactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.bridge.Query/Transactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Transactions(ctx, req.(*QueryTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TransactionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTransactionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TransactionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.bridge.Query/TransactionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TransactionById(ctx, req.(*QueryTransactionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTokenById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTokenById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTokenById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.bridge.Query/GetTokenById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTokenById(ctx, req.(*QueryGetTokenById))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTokens)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.bridge.Query/GetTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTokens(ctx, req.(*QueryGetTokens))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTokenPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTokenPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTokenPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.bridge.Query/GetTokenPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTokenPair(ctx, req.(*QueryGetTokenPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTokenInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTokenInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.bridge.Query/GetTokenInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTokenInfo(ctx, req.(*QueryGetTokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetChainById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetChainById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetChainById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.bridge.Query/GetChainById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetChainById(ctx, req.(*QueryGetChainById))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetChains)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.bridge.Query/GetChains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetChains(ctx, req.(*QueryGetChains))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTxsSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTxsSubmissions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTxsSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.bridge.Query/GetTxsSubmissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTxsSubmissions(ctx, req.(*QueryGetTxsSubmissions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTxSubmissionsByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTxSubmissionsByHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTxSubmissionsByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.bridge.Query/GetTxSubmissionsByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTxSubmissionsByHash(ctx, req.(*QueryGetTxSubmissionsByHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetReferralById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReferralById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetReferralById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.bridge.Query/GetReferralById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetReferralById(ctx, req.(*QueryGetReferralById))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetReferrals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReferrals)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetReferrals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.bridge.Query/GetReferrals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetReferrals(ctx, req.(*QueryGetReferrals))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetReferralRewardsByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReferralRewardByToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetReferralRewardsByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.bridge.Query/GetReferralRewardsByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetReferralRewardsByToken(ctx, req.(*QueryGetReferralRewardByToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetReferralsRewardsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReferralRewardsById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetReferralsRewardsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.bridge.Query/GetReferralsRewardsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetReferralsRewardsById(ctx, req.(*QueryGetReferralRewardsById))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStopListTxsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStopListTxById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStopListTxsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.bridge.Query/GetStopListTxsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStopListTxsById(ctx, req.(*QueryGetStopListTxById))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetStopListTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetStopListTxs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetStopListTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.bridge.Query/GetStopListTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetStopListTxs(ctx, req.(*QueryGetStopListTxs))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.bridge.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Transactions",
			Handler:    _Query_Transactions_Handler,
		},
		{
			MethodName: "TransactionById",
			Handler:    _Query_TransactionById_Handler,
		},
		{
			MethodName: "GetTokenById",
			Handler:    _Query_GetTokenById_Handler,
		},
		{
			MethodName: "GetTokens",
			Handler:    _Query_GetTokens_Handler,
		},
		{
			MethodName: "GetTokenPair",
			Handler:    _Query_GetTokenPair_Handler,
		},
		{
			MethodName: "GetTokenInfo",
			Handler:    _Query_GetTokenInfo_Handler,
		},
		{
			MethodName: "GetChainById",
			Handler:    _Query_GetChainById_Handler,
		},
		{
			MethodName: "GetChains",
			Handler:    _Query_GetChains_Handler,
		},
		{
			MethodName: "GetTxsSubmissions",
			Handler:    _Query_GetTxsSubmissions_Handler,
		},
		{
			MethodName: "GetTxSubmissionsByHash",
			Handler:    _Query_GetTxSubmissionsByHash_Handler,
		},
		{
			MethodName: "GetReferralById",
			Handler:    _Query_GetReferralById_Handler,
		},
		{
			MethodName: "GetReferrals",
			Handler:    _Query_GetReferrals_Handler,
		},
		{
			MethodName: "GetReferralRewardsByToken",
			Handler:    _Query_GetReferralRewardsByToken_Handler,
		},
		{
			MethodName: "GetReferralsRewardsById",
			Handler:    _Query_GetReferralsRewardsById_Handler,
		},
		{
			MethodName: "GetStopListTxsById",
			Handler:    _Query_GetStopListTxsById_Handler,
		},
		{
			MethodName: "GetStopListTxs",
			Handler:    _Query_GetStopListTxs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bridge/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTransactionByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTransactionByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTransactionByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TxNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTransactionByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTransactionByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTransactionByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTransactionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTransactionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTransactionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTransactionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTransactionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTransactionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTokenById) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokenById) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokenById) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTokenByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokenByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokenByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetTokens) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokens) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokens) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTokensResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokensResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokensResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChains) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChains) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChains) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChainsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chains) > 0 {
		for iNdEx := len(m.Chains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Chains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTokenPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokenPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokenPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DstChain) > 0 {
		i -= len(m.DstChain)
		copy(dAtA[i:], m.DstChain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DstChain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SrcAddress) > 0 {
		i -= len(m.SrcAddress)
		copy(dAtA[i:], m.SrcAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SrcAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SrcChain) > 0 {
		i -= len(m.SrcChain)
		copy(dAtA[i:], m.SrcChain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SrcChain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTokenInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokenInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokenInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTokenInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokenInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokenInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetTokenPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokenPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokenPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetChainById) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainById) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainById) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChainByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Chain.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetTxsSubmissions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTxsSubmissions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTxsSubmissions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTxsSubmissionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTxsSubmissionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTxsSubmissionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxsSubmissions) > 0 {
		for iNdEx := len(m.TxsSubmissions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TxsSubmissions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTxSubmissionsByHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTxSubmissionsByHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTxSubmissionsByHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTxSubmissionsByHashResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTxSubmissionsByHashResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTxSubmissionsByHashResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TxSubmissions.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetReferralById) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReferralById) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReferralById) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReferralId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ReferralId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReferralByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReferralByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReferralByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Referral.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetReferrals) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReferrals) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReferrals) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReferralsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReferralsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReferralsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Referrals) > 0 {
		for iNdEx := len(m.Referrals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Referrals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReferralRewardByToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReferralRewardByToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReferralRewardByToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TokenId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TokenId))
		i--
		dAtA[i] = 0x10
	}
	if m.ReferralId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ReferralId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReferralRewardByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReferralRewardByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReferralRewardByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Rewards.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetReferralRewardsById) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReferralRewardsById) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReferralRewardsById) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ReferralId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ReferralId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReferralRewardsByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReferralRewardsByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReferralRewardsByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStopListTxById) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStopListTxById) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStopListTxById) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TxNonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStopListTxByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStopListTxByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStopListTxByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetStopListTxs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStopListTxs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStopListTxs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetStopListTxsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetStopListTxsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetStopListTxsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTransactionByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TxNonce != 0 {
		n += 1 + sovQuery(uint64(m.TxNonce))
	}
	return n
}

func (m *QueryTransactionByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Transaction.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTransactionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTransactionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTokenById) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetTokenByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Token.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetTokens) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTokensResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChains) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChainsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Chains) > 0 {
		for _, e := range m.Chains {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTokenPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrcChain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SrcAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DstChain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTokenInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTokenInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Info.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetTokenPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Info.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetChainById) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChainByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Chain.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetTxsSubmissions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTxsSubmissionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TxsSubmissions) > 0 {
		for _, e := range m.TxsSubmissions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTxSubmissionsByHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTxSubmissionsByHashResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TxSubmissions.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetReferralById) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReferralId != 0 {
		n += 1 + sovQuery(uint64(m.ReferralId))
	}
	return n
}

func (m *QueryGetReferralByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Referral.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetReferrals) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReferralsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Referrals) > 0 {
		for _, e := range m.Referrals {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReferralRewardByToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReferralId != 0 {
		n += 1 + sovQuery(uint64(m.ReferralId))
	}
	if m.TokenId != 0 {
		n += 1 + sovQuery(uint64(m.TokenId))
	}
	return n
}

func (m *QueryGetReferralRewardByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Rewards.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetReferralRewardsById) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReferralId != 0 {
		n += 1 + sovQuery(uint64(m.ReferralId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReferralRewardsByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStopListTxById) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TxNonce != 0 {
		n += 1 + sovQuery(uint64(m.TxNonce))
	}
	return n
}

func (m *QueryGetStopListTxByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Transaction.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetStopListTxs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetStopListTxsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTransactionByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTransactionByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTransactionByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxNonce", wireType)
			}
			m.TxNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTransactionByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTransactionByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTransactionByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTransactionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTransactionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTransactionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTransactionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTransactionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTransactionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, Transaction{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokenById) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokenById: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokenById: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokenByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokenByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokenByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokens) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokens: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokens: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokensResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokensResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokensResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, Token{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChains) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChains: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChains: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chains = append(m.Chains, Chain{})
			if err := m.Chains[len(m.Chains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokenPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokenPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokenPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokenInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokenInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokenInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokenInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokenInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokenInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokenPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokenPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokenPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainById) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainById: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainById: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Chain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTxsSubmissions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTxsSubmissions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTxsSubmissions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTxsSubmissionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTxsSubmissionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTxsSubmissionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxsSubmissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxsSubmissions = append(m.TxsSubmissions, TransactionSubmissions{})
			if err := m.TxsSubmissions[len(m.TxsSubmissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTxSubmissionsByHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTxSubmissionsByHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTxSubmissionsByHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTxSubmissionsByHashResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTxSubmissionsByHashResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTxSubmissionsByHashResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxSubmissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TxSubmissions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReferralById) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReferralById: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReferralById: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferralId", wireType)
			}
			m.ReferralId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReferralId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReferralByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReferralByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReferralByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Referral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Referral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReferrals) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReferrals: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReferrals: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReferralsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReferralsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReferralsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Referrals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Referrals = append(m.Referrals, Referral{})
			if err := m.Referrals[len(m.Referrals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReferralRewardByToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReferralRewardByToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReferralRewardByToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferralId", wireType)
			}
			m.ReferralId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReferralId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			m.TokenId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReferralRewardByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReferralRewardByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReferralRewardByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReferralRewardsById) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReferralRewardsById: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReferralRewardsById: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferralId", wireType)
			}
			m.ReferralId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReferralId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReferralRewardsByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReferralRewardsByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReferralRewardsByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, ReferralRewards{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStopListTxById) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStopListTxById: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStopListTxById: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxNonce", wireType)
			}
			m.TxNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStopListTxByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStopListTxByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStopListTxByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStopListTxs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStopListTxs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStopListTxs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetStopListTxsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetStopListTxsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetStopListTxsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, Transaction{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
