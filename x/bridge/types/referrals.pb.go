// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bridge/models/referrals.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Referral struct {
	// stores a 16-bit unsigned integer
	Id                uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WithdrawalAddress string `protobuf:"bytes,2,opt,name=withdrawal_address,json=withdrawalAddress,proto3" json:"withdrawal_address,omitempty"`
	CommissionRate    string `protobuf:"bytes,3,opt,name=commission_rate,json=commissionRate,proto3" json:"commission_rate,omitempty"`
}

func (m *Referral) Reset()         { *m = Referral{} }
func (m *Referral) String() string { return proto.CompactTextString(m) }
func (*Referral) ProtoMessage()    {}
func (*Referral) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bf0bea5ae4d15eb, []int{0}
}
func (m *Referral) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Referral) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Referral.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Referral) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Referral.Merge(m, src)
}
func (m *Referral) XXX_Size() int {
	return m.Size()
}
func (m *Referral) XXX_DiscardUnknown() {
	xxx_messageInfo_Referral.DiscardUnknown(m)
}

var xxx_messageInfo_Referral proto.InternalMessageInfo

func (m *Referral) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Referral) GetWithdrawalAddress() string {
	if m != nil {
		return m.WithdrawalAddress
	}
	return ""
}

func (m *Referral) GetCommissionRate() string {
	if m != nil {
		return m.CommissionRate
	}
	return ""
}

type ReferralRewards struct {
	ReferralId         uint32 `protobuf:"varint,1,opt,name=referral_id,json=referralId,proto3" json:"referral_id,omitempty"`
	TokenId            uint64 `protobuf:"varint,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	ToClaim            string `protobuf:"bytes,3,opt,name=to_claim,json=toClaim,proto3" json:"to_claim,omitempty"`
	TotalClaimedAmount string `protobuf:"bytes,4,opt,name=total_claimed_amount,json=totalClaimedAmount,proto3" json:"total_claimed_amount,omitempty"`
}

func (m *ReferralRewards) Reset()         { *m = ReferralRewards{} }
func (m *ReferralRewards) String() string { return proto.CompactTextString(m) }
func (*ReferralRewards) ProtoMessage()    {}
func (*ReferralRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bf0bea5ae4d15eb, []int{1}
}
func (m *ReferralRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReferralRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReferralRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReferralRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReferralRewards.Merge(m, src)
}
func (m *ReferralRewards) XXX_Size() int {
	return m.Size()
}
func (m *ReferralRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_ReferralRewards.DiscardUnknown(m)
}

var xxx_messageInfo_ReferralRewards proto.InternalMessageInfo

func (m *ReferralRewards) GetReferralId() uint32 {
	if m != nil {
		return m.ReferralId
	}
	return 0
}

func (m *ReferralRewards) GetTokenId() uint64 {
	if m != nil {
		return m.TokenId
	}
	return 0
}

func (m *ReferralRewards) GetToClaim() string {
	if m != nil {
		return m.ToClaim
	}
	return ""
}

func (m *ReferralRewards) GetTotalClaimedAmount() string {
	if m != nil {
		return m.TotalClaimedAmount
	}
	return ""
}

func init() {
	proto.RegisterType((*Referral)(nil), "core.bridge.Referral")
	proto.RegisterType((*ReferralRewards)(nil), "core.bridge.ReferralRewards")
}

func init() { proto.RegisterFile("bridge/models/referrals.proto", fileDescriptor_6bf0bea5ae4d15eb) }

var fileDescriptor_6bf0bea5ae4d15eb = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xe3, 0x50, 0xd1, 0xb2, 0x15, 0xad, 0x58, 0xf5, 0xe0, 0x46, 0x60, 0xaa, 0x5e, 0xa8,
	0x90, 0x9a, 0x25, 0xf0, 0x02, 0xb4, 0x39, 0x71, 0x43, 0x3e, 0xe6, 0x62, 0x8d, 0xbd, 0x13, 0x67,
	0xc1, 0xde, 0x31, 0xbb, 0xeb, 0x84, 0xbc, 0x05, 0x67, 0x9e, 0x88, 0x63, 0x8e, 0x1c, 0x51, 0xf2,
	0x22, 0xc8, 0xeb, 0x35, 0xe1, 0x36, 0xf3, 0x7f, 0xbf, 0xfe, 0x19, 0xcd, 0xb0, 0x57, 0xb9, 0x51,
	0xb2, 0x44, 0x51, 0x93, 0xc4, 0xca, 0x0a, 0x83, 0x4b, 0x34, 0x06, 0x2a, 0x3b, 0x6d, 0x0c, 0x39,
	0xe2, 0xe7, 0x05, 0x19, 0x9c, 0xf6, 0x9e, 0xc9, 0x75, 0x49, 0x54, 0x56, 0x28, 0x3c, 0xca, 0xdb,
	0xa5, 0x00, 0xbd, 0xed, 0x7d, 0x93, 0xb7, 0x05, 0xd9, 0x9a, 0xac, 0xc8, 0xc1, 0xa2, 0xf8, 0xd6,
	0xa2, 0xd9, 0x8a, 0xf5, 0x2c, 0x47, 0x07, 0x33, 0xd1, 0x40, 0xa9, 0x34, 0x38, 0x45, 0x3a, 0x78,
	0x5f, 0x86, 0x18, 0x68, 0x94, 0x00, 0xad, 0xc9, 0x79, 0x18, 0x26, 0x4e, 0xae, 0x4a, 0x2a, 0xc9,
	0x97, 0xa2, 0xab, 0x82, 0x9a, 0xfc, 0x9f, 0x3f, 0x24, 0x17, 0xa4, 0x42, 0xe6, 0xad, 0x61, 0x67,
	0x69, 0x58, 0x9d, 0x5f, 0xb0, 0xb1, 0x92, 0x71, 0x74, 0x13, 0xdd, 0x3d, 0x4f, 0xc7, 0x4a, 0xf2,
	0x7b, 0xc6, 0x37, 0xca, 0xad, 0xa4, 0x81, 0x0d, 0x54, 0x19, 0x48, 0x69, 0xd0, 0xda, 0x78, 0x7c,
	0x13, 0xdd, 0x3d, 0x4b, 0x5f, 0x1c, 0xc9, 0x43, 0x0f, 0xf8, 0x1b, 0x76, 0x59, 0x50, 0x5d, 0x2b,
	0x6b, 0x15, 0xe9, 0xcc, 0x80, 0xc3, 0xf8, 0x89, 0xf7, 0x5e, 0x1c, 0xe5, 0x14, 0x1c, 0xde, 0xfe,
	0x8c, 0xd8, 0xe5, 0x30, 0x34, 0xc5, 0x0d, 0x18, 0x69, 0xf9, 0x6b, 0x76, 0x3e, 0x9c, 0x30, 0xfb,
	0xb7, 0x04, 0x1b, 0xa4, 0x4f, 0x92, 0x5f, 0xb3, 0x33, 0x47, 0x5f, 0x51, 0x77, 0xb4, 0x5b, 0xe1,
	0x24, 0x3d, 0xf5, 0xfd, 0x80, 0xb2, 0xa2, 0x02, 0x55, 0x87, 0x89, 0xa7, 0x8e, 0xe6, 0x5d, 0xcb,
	0xdf, 0xb1, 0x2b, 0x47, 0x0e, 0xaa, 0x9e, 0xa2, 0xcc, 0xa0, 0xa6, 0x56, 0xbb, 0xf8, 0xc4, 0xdb,
	0xb8, 0x67, 0xf3, 0x1e, 0x3d, 0x78, 0xf2, 0xb8, 0xf8, 0xb5, 0x4f, 0xa2, 0xdd, 0x3e, 0x89, 0xfe,
	0xec, 0x93, 0xe8, 0xc7, 0x21, 0x19, 0xed, 0x0e, 0xc9, 0xe8, 0xf7, 0x21, 0x19, 0x2d, 0x3e, 0x96,
	0xca, 0xad, 0xda, 0x7c, 0x5a, 0x50, 0x2d, 0x1e, 0xfd, 0x63, 0x2b, 0xb4, 0xf6, 0xfe, 0xb3, 0xa1,
	0x2f, 0x58, 0x38, 0x91, 0x1f, 0xa5, 0xee, 0xf7, 0x62, 0x3d, 0x7b, 0x2f, 0xbe, 0x07, 0x55, 0xb8,
	0x6d, 0x83, 0x36, 0x7f, 0xea, 0x6f, 0xfe, 0xe1, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x54, 0xca,
	0x46, 0xb3, 0x3c, 0x02, 0x00, 0x00,
}

func (m *Referral) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Referral) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Referral) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommissionRate) > 0 {
		i -= len(m.CommissionRate)
		copy(dAtA[i:], m.CommissionRate)
		i = encodeVarintReferrals(dAtA, i, uint64(len(m.CommissionRate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WithdrawalAddress) > 0 {
		i -= len(m.WithdrawalAddress)
		copy(dAtA[i:], m.WithdrawalAddress)
		i = encodeVarintReferrals(dAtA, i, uint64(len(m.WithdrawalAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintReferrals(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReferralRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReferralRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReferralRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalClaimedAmount) > 0 {
		i -= len(m.TotalClaimedAmount)
		copy(dAtA[i:], m.TotalClaimedAmount)
		i = encodeVarintReferrals(dAtA, i, uint64(len(m.TotalClaimedAmount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ToClaim) > 0 {
		i -= len(m.ToClaim)
		copy(dAtA[i:], m.ToClaim)
		i = encodeVarintReferrals(dAtA, i, uint64(len(m.ToClaim)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TokenId != 0 {
		i = encodeVarintReferrals(dAtA, i, uint64(m.TokenId))
		i--
		dAtA[i] = 0x10
	}
	if m.ReferralId != 0 {
		i = encodeVarintReferrals(dAtA, i, uint64(m.ReferralId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintReferrals(dAtA []byte, offset int, v uint64) int {
	offset -= sovReferrals(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Referral) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovReferrals(uint64(m.Id))
	}
	l = len(m.WithdrawalAddress)
	if l > 0 {
		n += 1 + l + sovReferrals(uint64(l))
	}
	l = len(m.CommissionRate)
	if l > 0 {
		n += 1 + l + sovReferrals(uint64(l))
	}
	return n
}

func (m *ReferralRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReferralId != 0 {
		n += 1 + sovReferrals(uint64(m.ReferralId))
	}
	if m.TokenId != 0 {
		n += 1 + sovReferrals(uint64(m.TokenId))
	}
	l = len(m.ToClaim)
	if l > 0 {
		n += 1 + l + sovReferrals(uint64(l))
	}
	l = len(m.TotalClaimedAmount)
	if l > 0 {
		n += 1 + l + sovReferrals(uint64(l))
	}
	return n
}

func sovReferrals(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReferrals(x uint64) (n int) {
	return sovReferrals(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Referral) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReferrals
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Referral: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Referral: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReferrals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReferrals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReferrals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReferrals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawalAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReferrals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReferrals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReferrals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommissionRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReferrals(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReferrals
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReferralRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReferrals
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReferralRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReferralRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferralId", wireType)
			}
			m.ReferralId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReferrals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReferralId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			m.TokenId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReferrals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToClaim", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReferrals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReferrals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReferrals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToClaim = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalClaimedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReferrals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReferrals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReferrals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalClaimedAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReferrals(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReferrals
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReferrals(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReferrals
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReferrals
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReferrals
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReferrals
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReferrals
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReferrals
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReferrals        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReferrals          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReferrals = fmt.Errorf("proto: unexpected end of group")
)
