// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: accumulator/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	ModulesInfo map[string]*ModuleInfo `protobuf:"bytes,2,rep,name=modulesInfo,proto3" json:"modulesInfo,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (p *Params) String() string {
	//TODO implement me
	panic("implement me")
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca5960d9822a2672, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetModulesInfo() map[string]*ModuleInfo {
	if m != nil {
		return m.ModulesInfo
	}
	return nil
}

// Define a message that contains the map
type ModuleInfo struct {
	ModuleName string       `protobuf:"bytes,1,opt,name=moduleName,proto3" json:"moduleName,omitempty"`
	Amount     int64        `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Address    string       `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Vesting    *VestingInfo `protobuf:"bytes,4,opt,name=vesting,proto3" json:"vesting,omitempty"`
}

func (m *ModuleInfo) Reset()         { *m = ModuleInfo{} }
func (m *ModuleInfo) String() string { return proto.CompactTextString(m) }
func (*ModuleInfo) ProtoMessage()    {}
func (*ModuleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca5960d9822a2672, []int{1}
}
func (m *ModuleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleInfo.Merge(m, src)
}
func (m *ModuleInfo) XXX_Size() int {
	return m.Size()
}
func (m *ModuleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleInfo proto.InternalMessageInfo

func (m *ModuleInfo) GetModuleName() string {
	if m != nil {
		return m.ModuleName
	}
	return ""
}

func (m *ModuleInfo) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ModuleInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ModuleInfo) GetVesting() *VestingInfo {
	if m != nil {
		return m.Vesting
	}
	return nil
}

type VestingInfo struct {
	StartTime         int64 `protobuf:"varint,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	StepTime          int64 `protobuf:"varint,2,opt,name=stepTime,proto3" json:"stepTime,omitempty"`
	VestingStepAmount int64 `protobuf:"varint,3,opt,name=vesting_step_amount,json=vestingStepAmount,proto3" json:"vesting_step_amount,omitempty"`
	TotalLockedAmount int64 `protobuf:"varint,4,opt,name=total_locked_amount,json=totalLockedAmount,proto3" json:"total_locked_amount,omitempty"`
}

func (m *VestingInfo) Reset()         { *m = VestingInfo{} }
func (m *VestingInfo) String() string { return proto.CompactTextString(m) }
func (*VestingInfo) ProtoMessage()    {}
func (*VestingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca5960d9822a2672, []int{2}
}
func (m *VestingInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VestingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VestingInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VestingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VestingInfo.Merge(m, src)
}
func (m *VestingInfo) XXX_Size() int {
	return m.Size()
}
func (m *VestingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VestingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VestingInfo proto.InternalMessageInfo

func (m *VestingInfo) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *VestingInfo) GetStepTime() int64 {
	if m != nil {
		return m.StepTime
	}
	return 0
}

func (m *VestingInfo) GetVestingStepAmount() int64 {
	if m != nil {
		return m.VestingStepAmount
	}
	return 0
}

func (m *VestingInfo) GetTotalLockedAmount() int64 {
	if m != nil {
		return m.TotalLockedAmount
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "accumulator.Params")
	proto.RegisterMapType((map[string]*ModuleInfo)(nil), "accumulator.Params.ModulesInfoEntry")
	proto.RegisterType((*ModuleInfo)(nil), "accumulator.ModuleInfo")
	proto.RegisterType((*VestingInfo)(nil), "accumulator.VestingInfo")
}

func init() { proto.RegisterFile("accumulator/params.proto", fileDescriptor_ca5960d9822a2672) }

var fileDescriptor_ca5960d9822a2672 = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x41, 0x8b, 0xd3, 0x40,
	0x1c, 0xc5, 0x33, 0x4d, 0x6d, 0xed, 0x3f, 0x97, 0x3a, 0x15, 0x1d, 0x8a, 0xc4, 0x52, 0x3c, 0xf4,
	0xe2, 0x04, 0xeb, 0xa5, 0xf4, 0xa6, 0xa0, 0x28, 0xa8, 0x48, 0x14, 0x05, 0x2f, 0x65, 0x9a, 0x8c,
	0xb1, 0x34, 0xc9, 0x84, 0xcc, 0x24, 0xd8, 0x6f, 0x21, 0x9e, 0xf6, 0xb8, 0xb7, 0x3d, 0xee, 0xd7,
	0xd8, 0x63, 0x8f, 0x7b, 0x5c, 0xda, 0x2f, 0xb2, 0x64, 0x26, 0xdd, 0xa6, 0x7b, 0x09, 0xf3, 0xff,
	0xbf, 0xdf, 0x9b, 0xf7, 0x02, 0x03, 0x84, 0x05, 0x41, 0x91, 0x14, 0x31, 0x53, 0x22, 0xf7, 0x32,
	0x96, 0xb3, 0x44, 0xd2, 0x2c, 0x17, 0x4a, 0x60, 0xa7, 0xa1, 0x0c, 0x1f, 0x47, 0x22, 0x12, 0x7a,
	0xef, 0x55, 0x27, 0x83, 0x8c, 0x2f, 0x11, 0x74, 0xbe, 0x6a, 0x0f, 0x7e, 0x0f, 0x4e, 0x22, 0xc2,
	0x22, 0xe6, 0xf2, 0x63, 0xfa, 0x5b, 0x90, 0xd6, 0xc8, 0x9e, 0x38, 0xd3, 0x17, 0xb4, 0x71, 0x07,
	0x35, 0x24, 0xfd, 0x7c, 0xc4, 0xde, 0xa5, 0x2a, 0xdf, 0xf8, 0x4d, 0xe3, 0xf0, 0x27, 0xf4, 0xef,
	0x03, 0xb8, 0x0f, 0xf6, 0x9a, 0x6f, 0x08, 0x1a, 0xa1, 0x49, 0xcf, 0xaf, 0x8e, 0xf8, 0x25, 0x3c,
	0x28, 0x59, 0x5c, 0x70, 0xd2, 0x1a, 0xa1, 0x89, 0x33, 0x7d, 0x7a, 0x92, 0x63, 0xfc, 0x95, 0xdd,
	0x37, 0xd4, 0xbc, 0x35, 0x43, 0xf3, 0xf6, 0xd9, 0xf9, 0x73, 0x6b, 0xfc, 0x1f, 0x01, 0x1c, 0x75,
	0xec, 0x02, 0x98, 0xf0, 0x2f, 0x2c, 0xe1, 0x75, 0x40, 0x63, 0x83, 0x9f, 0x40, 0x87, 0x25, 0xa2,
	0x48, 0x95, 0x0e, 0xb2, 0xfd, 0x7a, 0xc2, 0x04, 0xba, 0x2c, 0x0c, 0x73, 0x2e, 0x25, 0xb1, 0xb5,
	0xe9, 0x30, 0xe2, 0x29, 0x74, 0x4b, 0x2e, 0xd5, 0x2a, 0x8d, 0x48, 0x5b, 0x77, 0x23, 0x27, 0xdd,
	0x7e, 0x18, 0x4d, 0x97, 0x3b, 0x80, 0xe3, 0x0b, 0x04, 0x4e, 0x43, 0xc0, 0xcf, 0xa0, 0x27, 0x15,
	0xcb, 0xd5, 0xf7, 0x55, 0x5d, 0xca, 0xf6, 0x8f, 0x0b, 0x3c, 0x84, 0x87, 0x52, 0xf1, 0x4c, 0x8b,
	0xa6, 0xd5, 0xdd, 0x8c, 0x29, 0x0c, 0xea, 0x4b, 0x17, 0xd5, 0x6e, 0x51, 0x97, 0xb7, 0x35, 0xf6,
	0xa8, 0x96, 0xbe, 0x29, 0x9e, 0xbd, 0x31, 0xff, 0x41, 0x61, 0xa0, 0x84, 0x62, 0xf1, 0x22, 0x16,
	0xc1, 0x9a, 0x87, 0x07, 0xbe, 0x6d, 0x78, 0x2d, 0x7d, 0xd2, 0x8a, 0xe1, 0xdf, 0x7e, 0xb8, 0xda,
	0xb9, 0x68, 0xbb, 0x73, 0xd1, 0xcd, 0xce, 0x45, 0xff, 0xf6, 0xae, 0xb5, 0xdd, 0xbb, 0xd6, 0xf5,
	0xde, 0xb5, 0x7e, 0xd1, 0x68, 0xa5, 0xfe, 0x14, 0x4b, 0x1a, 0x88, 0xc4, 0xe3, 0x65, 0x22, 0x64,
	0xfd, 0x2d, 0x5f, 0xcd, 0xbc, 0xbf, 0x5e, 0xf3, 0x91, 0xa9, 0x4d, 0xc6, 0xe5, 0xb2, 0xa3, 0x5f,
	0xd0, 0xeb, 0xdb, 0x00, 0x00, 0x00, 0xff, 0xff, 0x85, 0x14, 0xe7, 0x7e, 0x80, 0x02, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ModulesInfo) > 0 {
		for k := range m.ModulesInfo {
			v := m.ModulesInfo[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintParams(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintParams(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintParams(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *ModuleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Vesting != nil {
		{
			size, err := m.Vesting.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Amount != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ModuleName) > 0 {
		i -= len(m.ModuleName)
		copy(dAtA[i:], m.ModuleName)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ModuleName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VestingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VestingInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalLockedAmount != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.TotalLockedAmount))
		i--
		dAtA[i] = 0x20
	}
	if m.VestingStepAmount != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.VestingStepAmount))
		i--
		dAtA[i] = 0x18
	}
	if m.StepTime != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.StepTime))
		i--
		dAtA[i] = 0x10
	}
	if m.StartTime != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ModulesInfo) > 0 {
		for k, v := range m.ModulesInfo {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovParams(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovParams(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovParams(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ModuleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ModuleName)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovParams(uint64(m.Amount))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.Vesting != nil {
		l = m.Vesting.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func (m *VestingInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTime != 0 {
		n += 1 + sovParams(uint64(m.StartTime))
	}
	if m.StepTime != 0 {
		n += 1 + sovParams(uint64(m.StepTime))
	}
	if m.VestingStepAmount != 0 {
		n += 1 + sovParams(uint64(m.VestingStepAmount))
	}
	if m.TotalLockedAmount != 0 {
		n += 1 + sovParams(uint64(m.TotalLockedAmount))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModulesInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModulesInfo == nil {
				m.ModulesInfo = make(map[string]*ModuleInfo)
			}
			var mapkey string
			var mapvalue *ModuleInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowParams
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParams
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthParams
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthParams
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParams
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthParams
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthParams
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ModuleInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipParams(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthParams
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ModulesInfo[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vesting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vesting == nil {
				m.Vesting = &VestingInfo{}
			}
			if err := m.Vesting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VestingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VestingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VestingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StepTime", wireType)
			}
			m.StepTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StepTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingStepAmount", wireType)
			}
			m.VestingStepAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VestingStepAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLockedAmount", wireType)
			}
			m.TotalLockedAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalLockedAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
