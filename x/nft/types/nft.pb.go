// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nft/nft.proto

package types

import (
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// NFT defines the NFT.
type NFT struct {
	Address             string     `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Owner               string     `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Uri                 string     `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	VestingPeriod       int64      `protobuf:"varint,4,opt,name=vesting_period,json=vestingPeriod,proto3" json:"vesting_period,omitempty"`
	RewardPerPeriod     types.Coin `protobuf:"bytes,5,opt,name=reward_per_period,json=rewardPerPeriod,proto3" json:"reward_per_period"`
	VestingPeriodsCount int64      `protobuf:"varint,6,opt,name=vesting_periods_count,json=vestingPeriodsCount,proto3" json:"vesting_periods_count,omitempty"`
	AvalableToWithdraw  types.Coin `protobuf:"bytes,7,opt,name=avalableToWithdraw,proto3" json:"avalableToWithdraw"`
	LastVestingTime     int64      `protobuf:"varint,8,opt,name=lastVestingTime,proto3" json:"lastVestingTime,omitempty"`
	VestingCounter      int64      `protobuf:"varint,9,opt,name=vestingCounter,proto3" json:"vestingCounter,omitempty"`
	Denom               string     `protobuf:"bytes,10,opt,name=Denom,proto3" json:"Denom,omitempty"`
	// data is an app specific data of the NFT. Optional
	Data *types1.Any `protobuf:"bytes,11,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *NFT) Reset()         { *m = NFT{} }
func (m *NFT) String() string { return proto.CompactTextString(m) }
func (*NFT) ProtoMessage()    {}
func (*NFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe8ab7e15b7f0646, []int{0}
}
func (m *NFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NFT.Merge(m, src)
}
func (m *NFT) XXX_Size() int {
	return m.Size()
}
func (m *NFT) XXX_DiscardUnknown() {
	xxx_messageInfo_NFT.DiscardUnknown(m)
}

var xxx_messageInfo_NFT proto.InternalMessageInfo

func (m *NFT) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *NFT) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *NFT) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *NFT) GetVestingPeriod() int64 {
	if m != nil {
		return m.VestingPeriod
	}
	return 0
}

func (m *NFT) GetRewardPerPeriod() types.Coin {
	if m != nil {
		return m.RewardPerPeriod
	}
	return types.Coin{}
}

func (m *NFT) GetVestingPeriodsCount() int64 {
	if m != nil {
		return m.VestingPeriodsCount
	}
	return 0
}

func (m *NFT) GetAvalableToWithdraw() types.Coin {
	if m != nil {
		return m.AvalableToWithdraw
	}
	return types.Coin{}
}

func (m *NFT) GetLastVestingTime() int64 {
	if m != nil {
		return m.LastVestingTime
	}
	return 0
}

func (m *NFT) GetVestingCounter() int64 {
	if m != nil {
		return m.VestingCounter
	}
	return 0
}

func (m *NFT) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *NFT) GetData() *types1.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*NFT)(nil), "core.nft.NFT")
}

func init() { proto.RegisterFile("nft/nft.proto", fileDescriptor_fe8ab7e15b7f0646) }

var fileDescriptor_fe8ab7e15b7f0646 = []byte{
	// 455 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x5d, 0x6b, 0xd4, 0x40,
	0x14, 0xdd, 0x98, 0x7e, 0x4e, 0xa9, 0xd5, 0x71, 0x85, 0x69, 0x91, 0xb8, 0x08, 0x4a, 0x10, 0x3a,
	0x63, 0xeb, 0x2f, 0xb0, 0x15, 0x1f, 0x14, 0xb4, 0x2c, 0x8b, 0x82, 0x2f, 0x65, 0x92, 0xdc, 0xcd,
	0x0e, 0x24, 0x73, 0xe3, 0xcc, 0x64, 0xd7, 0xfc, 0x0b, 0x7f, 0x56, 0x1f, 0x8b, 0x4f, 0x3e, 0x89,
	0xec, 0xfe, 0x11, 0xc9, 0x24, 0x2b, 0xb6, 0xf8, 0xe0, 0xdb, 0xbd, 0xe7, 0x9e, 0x7b, 0xce, 0xe1,
	0x72, 0xc9, 0xbe, 0x9e, 0x3a, 0xa1, 0xa7, 0x8e, 0x57, 0x06, 0x1d, 0xd2, 0x9d, 0x14, 0x0d, 0x70,
	0x3d, 0x75, 0x47, 0x87, 0x39, 0x62, 0x5e, 0x80, 0xf0, 0x78, 0x52, 0x4f, 0x85, 0xd4, 0x4d, 0x47,
	0x3a, 0x7a, 0x9e, 0xa2, 0x2d, 0xd1, 0x8a, 0x44, 0x5a, 0x10, 0x5f, 0x6a, 0x30, 0x8d, 0x98, 0x9f,
	0x24, 0xe0, 0xe4, 0x89, 0xa8, 0x64, 0xae, 0xb4, 0x74, 0x0a, 0x75, 0xcf, 0x7d, 0xd4, 0xcb, 0xc8,
	0x4a, 0x09, 0xa9, 0x35, 0x3a, 0x3f, 0xb4, 0xfd, 0x74, 0x98, 0x63, 0x8e, 0xbe, 0x14, 0x6d, 0xd5,
	0xa3, 0xd1, 0xdf, 0xfa, 0x6b, 0xe5, 0x14, 0x55, 0xaf, 0xf9, 0xe4, 0x7b, 0x48, 0xc2, 0xf7, 0x6f,
	0x26, 0x94, 0x91, 0x6d, 0x99, 0x65, 0x06, 0xac, 0x65, 0xc1, 0x28, 0x88, 0x77, 0xc7, 0xeb, 0x96,
	0x0e, 0xc9, 0x26, 0x2e, 0x34, 0x18, 0x76, 0xc7, 0xe3, 0x5d, 0x43, 0xef, 0x91, 0xb0, 0x36, 0x8a,
	0x85, 0x1e, 0x6b, 0x4b, 0xfa, 0x94, 0xdc, 0x9d, 0x83, 0x75, 0x4a, 0xe7, 0x97, 0x15, 0x18, 0x85,
	0x19, 0xdb, 0x18, 0x05, 0x71, 0x38, 0xde, 0xef, 0xd1, 0x0b, 0x0f, 0xd2, 0x77, 0xe4, 0xbe, 0x81,
	0x85, 0x34, 0x59, 0xcb, 0x5a, 0x33, 0x37, 0x47, 0x41, 0xbc, 0x77, 0x7a, 0xc8, 0xbb, 0xb0, 0xbc,
	0x0d, 0xcb, 0xfb, 0xb0, 0xfc, 0x1c, 0x95, 0x3e, 0xdb, 0xb8, 0xfa, 0xf9, 0x78, 0x30, 0x3e, 0xe8,
	0x36, 0x2f, 0xc0, 0xf4, 0x62, 0xa7, 0xe4, 0xe1, 0x4d, 0x4f, 0x7b, 0x99, 0x62, 0xad, 0x1d, 0xdb,
	0xf2, 0xd6, 0x0f, 0x6e, 0x58, 0xdb, 0xf3, 0x76, 0x44, 0x3f, 0x10, 0x2a, 0xe7, 0xb2, 0x90, 0x49,
	0x01, 0x13, 0xfc, 0xa4, 0xdc, 0x2c, 0x33, 0x72, 0xc1, 0xb6, 0xff, 0x2f, 0xc1, 0x3f, 0x56, 0x69,
	0x4c, 0x0e, 0x0a, 0x69, 0xdd, 0xc7, 0xce, 0x6b, 0xa2, 0x4a, 0x60, 0x3b, 0xde, 0xfe, 0x36, 0x4c,
	0x9f, 0xfd, 0x39, 0x91, 0x8f, 0x02, 0x86, 0xed, 0x7a, 0xe2, 0x2d, 0xb4, 0x3d, 0xf9, 0x6b, 0xd0,
	0x58, 0x32, 0xd2, 0x9d, 0xdc, 0x37, 0x34, 0x26, 0x1b, 0x99, 0x74, 0x92, 0xed, 0xf9, 0xa8, 0x43,
	0xde, 0x7d, 0x03, 0x5f, 0x3f, 0x15, 0x7f, 0xa5, 0x9b, 0xb1, 0x67, 0x9c, 0xbd, 0xbd, 0x5a, 0x46,
	0xc1, 0xf5, 0x32, 0x0a, 0x7e, 0x2d, 0xa3, 0xe0, 0xdb, 0x2a, 0x1a, 0x5c, 0xaf, 0xa2, 0xc1, 0x8f,
	0x55, 0x34, 0xf8, 0xfc, 0x22, 0x57, 0x6e, 0x56, 0x27, 0x3c, 0xc5, 0x52, 0xcc, 0x9a, 0x02, 0x8e,
	0x1d, 0xc8, 0x52, 0x24, 0x46, 0x65, 0x39, 0x14, 0x60, 0xed, 0x71, 0xfb, 0xb3, 0xe2, 0x6b, 0xfb,
	0xc5, 0xc2, 0x35, 0x15, 0xd8, 0x64, 0xcb, 0xeb, 0xbf, 0xfc, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x92,
	0xe4, 0xa8, 0xea, 0xdd, 0x02, 0x00, 0x00,
}

func (m *NFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x52
	}
	if m.VestingCounter != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.VestingCounter))
		i--
		dAtA[i] = 0x48
	}
	if m.LastVestingTime != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.LastVestingTime))
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.AvalableToWithdraw.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.VestingPeriodsCount != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.VestingPeriodsCount))
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.RewardPerPeriod.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.VestingPeriod != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.VestingPeriod))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNft(dAtA []byte, offset int, v uint64) int {
	offset -= sovNft(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	if m.VestingPeriod != 0 {
		n += 1 + sovNft(uint64(m.VestingPeriod))
	}
	l = m.RewardPerPeriod.Size()
	n += 1 + l + sovNft(uint64(l))
	if m.VestingPeriodsCount != 0 {
		n += 1 + sovNft(uint64(m.VestingPeriodsCount))
	}
	l = m.AvalableToWithdraw.Size()
	n += 1 + l + sovNft(uint64(l))
	if m.LastVestingTime != 0 {
		n += 1 + sovNft(uint64(m.LastVestingTime))
	}
	if m.VestingCounter != 0 {
		n += 1 + sovNft(uint64(m.VestingCounter))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovNft(uint64(l))
	}
	return n
}

func sovNft(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNft(x uint64) (n int) {
	return sovNft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingPeriod", wireType)
			}
			m.VestingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VestingPeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPerPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardPerPeriod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingPeriodsCount", wireType)
			}
			m.VestingPeriodsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VestingPeriodsCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvalableToWithdraw", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AvalableToWithdraw.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastVestingTime", wireType)
			}
			m.LastVestingTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastVestingTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingCounter", wireType)
			}
			m.VestingCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VestingCounter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &types1.Any{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNft
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNft
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNft
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNft        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNft          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNft = fmt.Errorf("proto: unexpected end of group")
)
